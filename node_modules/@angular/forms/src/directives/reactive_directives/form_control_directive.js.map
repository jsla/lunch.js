{"version":3,"file":"form_control_directive.js","sourceRoot":"","sources":["../../../../../../modules/@angular/forms/src/directives/reactive_directives/form_control_directive.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Inject, Input, OnChanges, Optional, Output, Self, SimpleChanges, forwardRef} from '@angular/core';\n\nimport {EventEmitter} from '../../facade/async';\nimport {FormControl} from '../../model';\nimport {NG_ASYNC_VALIDATORS, NG_VALIDATORS} from '../../validators';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '../control_value_accessor';\nimport {NgControl} from '../ng_control';\nimport {ReactiveErrors} from '../reactive_errors';\nimport {composeAsyncValidators, composeValidators, isPropertyUpdated, selectValueAccessor, setUpControl} from '../shared';\nimport {AsyncValidatorFn, Validator, ValidatorFn} from '../validators';\n\nexport const /** @type {?} */ formControlBinding: any = {\n  provide: NgControl,\n  useExisting: forwardRef(() => FormControlDirective)\n};\n/**\n * \\@whatItDoes Syncs a standalone {\\@link FormControl} instance to a form control element.\n * \n * In other words, this directive ensures that any values written to the {\\@link FormControl}\n * instance programmatically will be written to the DOM element (model -> view). Conversely,\n * any values written to the DOM element through user input will be reflected in the\n * {\\@link FormControl} instance (view -> model).\n * \n * \\@howToUse \n * \n * Use this directive if you'd like to create and manage a {\\@link FormControl} instance directly.\n * Simply create a {\\@link FormControl}, save it to your component class, and pass it into the\n * {\\@link FormControlDirective}.\n * \n * This directive is designed to be used as a standalone control.  Unlike {\\@link FormControlName},\n * it does not require that your {\\@link FormControl} instance be part of any parent\n * {\\@link FormGroup}, and it won't be registered to any {\\@link FormGroupDirective} that\n * exists above it.\n * \n * **Get the value**: the `value` property is always synced and available on the\n * {\\@link FormControl} instance. See a full list of available properties in\n * {\\@link AbstractControl}.\n * \n * **Set the value**: You can pass in an initial value when instantiating the {\\@link FormControl},\n * or you can set it programmatically later using {\\@link AbstractControl.setValue} or\n * {\\@link AbstractControl.patchValue}.\n * \n * **Listen to value**: If you want to listen to changes in the value of the control, you can\n * subscribe to the {\\@link AbstractControl.valueChanges} event.  You can also listen to\n * {\\@link AbstractControl.statusChanges} to be notified when the validation status is\n * re-calculated.\n * \n * ### Example\n * \n * {\\@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n * \n * * **npm package**: `\\@angular/forms`\n * \n * * **NgModule**: `ReactiveFormsModule`\n * \n *  \\@stable\n */\nexport class FormControlDirective extends NgControl implements OnChanges {\n  viewModel: any;\n\n   form: FormControl;\n   model: any;\n   update = new EventEmitter();\n/**\n * @param {?} isDisabled\n * @return {?}\n */\nset isDisabled(isDisabled: boolean) { ReactiveErrors.disabledAttrWarning(); }\n/**\n * @param {?} validators\n * @param {?} asyncValidators\n * @param {?} valueAccessors\n */\nconstructor(   validators: Array<Validator|ValidatorFn>,\n                 asyncValidators: Array<Validator|AsyncValidatorFn>,\n                \n              valueAccessors: ControlValueAccessor[]) {\n                super();\n                this._rawValidators = validators || [];\n                this._rawAsyncValidators = asyncValidators || [];\n                this.valueAccessor = selectValueAccessor(this, valueAccessors);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n                if (this._isControlChanged(changes)) {\n                  setUpControl(this.form, this);\n                  if (this.control.disabled && this.valueAccessor.setDisabledState) {\n                    this.valueAccessor.setDisabledState(true);\n                  }\n                  this.form.updateValueAndValidity({emitEvent: false});\n                }\n                if (isPropertyUpdated(changes, this.viewModel)) {\n                  this.form.setValue(this.model);\n                  this.viewModel = this.model;\n                }\n              }\n/**\n * @return {?}\n */\nget path(): string[] { return []; }\n/**\n * @return {?}\n */\nget validator(): ValidatorFn { return composeValidators(this._rawValidators); }\n/**\n * @return {?}\n */\nget asyncValidator(): AsyncValidatorFn {\n                return composeAsyncValidators(this._rawAsyncValidators);\n              }\n/**\n * @return {?}\n */\nget control(): FormControl { return this.form; }\n/**\n * @param {?} newValue\n * @return {?}\n */\nviewToModelUpdate(newValue: any): void {\n                this.viewModel = newValue;\n                this.update.emit(newValue);\n              }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _isControlChanged(changes: {[key: string]: any}): boolean {\n                return changes.hasOwnProperty('form');\n              }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[formControl]', providers: [formControlBinding], exportAs: 'ngForm'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_ASYNC_VALIDATORS, ] }, ]},\n{type: Array, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [NG_VALUE_ACCESSOR, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'form': [{ type: Input, args: ['formControl', ] },],\n'model': [{ type: Input, args: ['ngModel', ] },],\n'update': [{ type: Output, args: ['ngModelChange', ] },],\n'isDisabled': [{ type: Input, args: ['disabled', ] },],\n};\n}\n\nfunction FormControlDirective_tsickle_Closure_declarations() {\n/** @type {?} */\nFormControlDirective.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nFormControlDirective.ctorParameters;\n/** @type {?} */\nFormControlDirective.propDecorators;\n/** @type {?} */\nFormControlDirective.prototype.viewModel;\n/** @type {?} */\nFormControlDirective.prototype.form;\n/** @type {?} */\nFormControlDirective.prototype.model;\n/** @type {?} */\nFormControlDirective.prototype.update;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}