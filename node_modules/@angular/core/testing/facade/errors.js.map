{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/testing/facade/errors.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;AAEH;;GAEG;AACH;IACE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;AACnC,CAAC;AAED;;GAEG;AACH;IAA+B,6BAAK;IAIlC,mBAAY,OAAe;QACzB,kBAAM,OAAO,CAAC,CAAC;QACf,qEAAqE;QACrE,8DAA8D;QAC9D,8CAA8C;QAC9C,oDAAoD;QACpD,IAAM,WAAW,GAAG,IAAI,KAAK,CAAC,OAAO,CAAiB,CAAC;QACvD,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED,sBAAI,8BAAO;aAAX,cAAgB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;aACnD,UAAY,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC;;;OADV;IAEnD,sBAAI,2BAAI;aAAR,cAAa,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAC7C,sBAAI,4BAAK;aAAT,cAAc,MAAM,CAAE,IAAI,CAAC,YAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;aACxD,UAAU,KAAK,IAAK,IAAI,CAAC,YAAoB,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;;;OADN;IAExD,4BAAQ,GAAR,cAAa,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACrD,gBAAC;AAAD,CAAC,AApBD,CAA+B,KAAK,GAoBnC;AAED;;GAEG;AACH;IAAkC,gCAAS;IAGzC,sBAAY,OAAe,EAAE,KAAU;QACrC,kBAAS,OAAO,qBAAe,KAAK,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,GAAE,KAAK,CAAG,CAAC,CAAC;QACjF,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAED,sBAAI,+BAAK;aAAT;YACE,MAAM,CAAE,CAAC,IAAI,CAAC,aAAa,YAAY,KAAK,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAS;iBACzF,KAAK,CAAC;QACb,CAAC;;;OAAA;IACH,mBAAC;AAAD,CAAC,AAZD,CAAkC,SAAS,GAY1C","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Convenience to throw an Error with 'unimplemented' as the message.\n */\nexport function unimplemented(): any {\n  throw new Error('unimplemented');\n}\n\n/**\n * @stable\n */\nexport class BaseError extends Error {\n  /** @internal **/\n  _nativeError: Error;\n\n  constructor(message: string) {\n    super(message);\n    // Errors don't use current this, instead they create a new instance.\n    // We have to do forward all of our api to the nativeInstance.\n    // TODO(bradfordcsmith): Remove this hack when\n    //     google/closure-compiler/issues/2102 is fixed.\n    const nativeError = new Error(message) as any as Error;\n    this._nativeError = nativeError;\n  }\n\n  get message() { return this._nativeError.message; }\n  set message(message) { this._nativeError.message = message; }\n  get name() { return this._nativeError.name; }\n  get stack() { return (this._nativeError as any).stack; }\n  set stack(value) { (this._nativeError as any).stack = value; }\n  toString() { return this._nativeError.toString(); }\n}\n\n/**\n * @stable\n */\nexport class WrappedError extends BaseError {\n  originalError: any;\n\n  constructor(message: string, error: any) {\n    super(`${message} caused by: ${error instanceof Error ? error.message: error }`);\n    this.originalError = error;\n  }\n\n  get stack() {\n    return ((this.originalError instanceof Error ? this.originalError : this._nativeError) as any)\n        .stack;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}