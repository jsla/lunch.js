{"version":3,"file":"ng_module_factory_loader.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/ng_module_factory_loader.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH;;;;GAIG;AACH;IAAA;IAOA,CAAC;IAND;;;;OAIG;IACH,oCAAI,GAAJ,UAAK,IAAY,IAAG,CAAC;IACrB,4BAAC;AAAD,CAAC,AAPD,IAOC;AAED,IAAI,gBAAgB,CAAC,eAAe,GAAG,IAAI,GAAG,EAAgC,CAAC;AAC/E;;;;;;GAMG;AACH,sCAAsC,EAAU,EAAE,OAA6B;IAC7E,IAAM,gBAAgB,CAAC,QAAQ,GAAG,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC1D,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QACb,MAAM,IAAI,KAAK,CAAC,qCAAmC,EAAE,WAC/B,QAAQ,CAAC,UAAU,CAAC,IAAI,YAAO,OAAO,CAAC,UAAU,CAAC,IAAM,CAAC,CAAC;IAClF,CAAC;IACD,eAAe,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;AACnC,CAAC;AACD;;GAEG;AACH;IACE,eAAe,GAAG,IAAI,GAAG,EAAgC,CAAC;AAC5D,CAAC;AACD;;;;;;;GAOG;AACH,iCAAiC,EAAU;IACzC,IAAM,gBAAgB,CAAC,OAAO,GAAG,eAAe,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACzD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC;QAAC,MAAM,IAAI,KAAK,CAAC,uBAAqB,EAAE,YAAS,CAAC,CAAC;IAChE,MAAM,CAAC,OAAO,CAAC;AACjB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModuleFactory} from './ng_module_factory';\n/**\n * Used to load ng module factories.\n * \\@stable\n * @abstract\n */\nexport abstract class NgModuleFactoryLoader {\n/**\n * @abstract\n * @param {?} path\n * @return {?}\n */\nload(path: string) {}\n}\n\nlet /** @type {?} */ moduleFactories = new Map<string, NgModuleFactory<any>>();\n/**\n * Registers a loaded module. Should only be called from generated NgModuleFactory code.\n * \\@experimental\n * @param {?} id\n * @param {?} factory\n * @return {?}\n */\nexport function registerModuleFactory(id: string, factory: NgModuleFactory<any>) {\n  const /** @type {?} */ existing = moduleFactories.get(id);\n  if (existing) {\n    throw new Error(`Duplicate module registered for ${id\n                    } - ${existing.moduleType.name} vs ${factory.moduleType.name}`);\n  }\n  moduleFactories.set(id, factory);\n}\n/**\n * @return {?}\n */\nexport function clearModulesForTest() {\n  moduleFactories = new Map<string, NgModuleFactory<any>>();\n}\n/**\n * Returns the NgModuleFactory with the given id, if it exists and has been loaded.\n * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module\n * cannot be found.\n * \\@experimental\n * @param {?} id\n * @return {?}\n */\nexport function getModuleFactory(id: string): NgModuleFactory<any> {\n  const /** @type {?} */ factory = moduleFactories.get(id);\n  if (!factory) throw new Error(`No module with ID ${id} loaded`);\n  return factory;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}