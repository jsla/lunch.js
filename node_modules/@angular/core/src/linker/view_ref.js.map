{"version":3,"file":"view_ref.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/view_ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationQueue} from '../animation/animation_queue';\nimport {ChangeDetectorRef} from '../change_detection/change_detector_ref';\nimport {ChangeDetectorStatus} from '../change_detection/constants';\nimport {AppView} from './view';\n/**\n * \\@stable\n * @abstract\n */\nexport abstract class ViewRef extends ChangeDetectorRef {\n/**\n * Destroys the view and all of the data structures associated with it.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @abstract\n * @return {?}\n */\ndestroyed() {}\n/**\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {}\n}\n/**\n * Represents an Angular View.\n * \n * <!-- TODO: move the next two paragraphs to the dev guide -->\n * A View is a fundamental building block of the application UI. It is the smallest grouping of\n * Elements which are created and destroyed together.\n * \n * Properties of elements in a View can change, but the structure (number and order) of elements in\n * a View cannot. Changing the structure of Elements can only be done by inserting, moving or\n * removing nested Views via a {\\@link ViewContainerRef}. Each View can contain many View Containers.\n * <!-- /TODO -->\n * \n * ### Example\n * \n * Given this template...\n * \n * ```\n * Count: {{items.length}}\n * <ul>\n *   <li *ngFor=\"let  item of items\">{{item}}</li>\n * </ul>\n * ```\n * \n * We have two {\\@link TemplateRef}s:\n * \n * Outer {\\@link TemplateRef}:\n * ```\n * Count: {{items.length}}\n * <ul>\n *   <template ngFor let-item [ngForOf]=\"items\"></template>\n * </ul>\n * ```\n * \n * Inner {\\@link TemplateRef}:\n * ```\n *   <li>{{item}}</li>\n * ```\n * \n * Notice that the original template is broken down into two separate {\\@link TemplateRef}s.\n * \n * The outer/inner {\\@link TemplateRef}s are then assembled into views like so:\n * \n * ```\n * <!-- ViewRef: outer-0 -->\n * Count: 2\n * <ul>\n *   <template view-container-ref></template>\n *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->\n *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->\n * </ul>\n * <!-- /ViewRef: outer-0 -->\n * ```\n * \\@experimental\n * @abstract\n */\nexport abstract class EmbeddedViewRef<C> extends ViewRef {\n/**\n * @abstract\n * @return {?}\n */\ncontext() {}\n/**\n * @abstract\n * @return {?}\n */\nrootNodes() {}\n}\nexport class ViewRef_<C> implements EmbeddedViewRef<C>, ChangeDetectorRef {\n  /** @internal */\n  _originalMode: ChangeDetectorStatus;\n/**\n * @param {?} _view\n * @param {?} animationQueue\n */\nconstructor(private _view: AppView<C>,\npublic animationQueue: AnimationQueue) {\n    this._view = _view;\n    this._originalMode = this._view.cdMode;\n  }\n/**\n * @return {?}\n */\nget internalView(): AppView<C> { return this._view; }\n/**\n * @return {?}\n */\nget rootNodes(): any[] { return this._view.flatRootNodes; }\n/**\n * @return {?}\n */\nget context() { return this._view.context; }\n/**\n * @return {?}\n */\nget destroyed(): boolean { return this._view.destroyed; }\n/**\n * @return {?}\n */\nmarkForCheck(): void { this._view.markPathToRootAsCheckOnce(); }\n/**\n * @return {?}\n */\ndetach(): void { this._view.cdMode = ChangeDetectorStatus.Detached; }\n/**\n * @return {?}\n */\ndetectChanges(): void {\n    this._view.detectChanges(false);\n    this.animationQueue.flush();\n  }\n/**\n * @return {?}\n */\ncheckNoChanges(): void { this._view.detectChanges(true); }\n/**\n * @return {?}\n */\nreattach(): void {\n    this._view.cdMode = this._originalMode;\n    this.markForCheck();\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: Function) {\n    if (!this._view.disposables) {\n      this._view.disposables = [];\n    }\n    this._view.disposables.push(callback);\n  }\n/**\n * @return {?}\n */\ndestroy() { this._view.detachAndDestroy(); }\n}\n\nfunction ViewRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nViewRef_.prototype._originalMode;\n/** @type {?} */\nViewRef_.prototype._view;\n/** @type {?} */\nViewRef_.prototype.animationQueue;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}