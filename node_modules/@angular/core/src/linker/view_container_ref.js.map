{"version":3,"file":"view_container_ref.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/view_container_ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di/injector';\nimport {isPresent} from '../facade/lang';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from '../profile/profile';\n\nimport {ComponentFactory, ComponentRef} from './component_factory';\nimport {ElementRef} from './element_ref';\nimport {TemplateRef} from './template_ref';\nimport {ViewContainer} from './view_container';\nimport {EmbeddedViewRef, ViewRef, ViewRef_} from './view_ref';\n/**\n * Represents a container where one or more Views can be attached.\n * \n * The container can contain two kinds of Views. Host Views, created by instantiating a\n * {\\@link Component} via {\\@link #createComponent}, and Embedded Views, created by instantiating an\n * {\\@link TemplateRef Embedded Template} via {\\@link #createEmbeddedView}.\n * \n * The location of the View Container within the containing View is specified by the Anchor\n * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only\n * have a single View Container.\n * \n * Root elements of Views attached to this container become siblings of the Anchor Element in\n * the Rendered View.\n * \n * To access a `ViewContainerRef` of an Element, you can either place a {\\@link Directive} injected\n * with `ViewContainerRef` on the Element, or you obtain it via a {\\@link ViewChild} query.\n * \\@stable\n * @abstract\n */\nexport abstract class ViewContainerRef {\n/**\n * Anchor element that specifies the location of this container in the containing View.\n * <!-- TODO: rename to anchorElement -->\n * @abstract\n * @return {?}\n */\nelement() {}\n/**\n * @abstract\n * @return {?}\n */\ninjector() {}\n/**\n * @abstract\n * @return {?}\n */\nparentInjector() {}\n/**\n * Destroys all Views in this container.\n * @abstract\n * @return {?}\n */\nclear() {}\n/**\n * Returns the {\\@link ViewRef} for the View located in this container at the specified index.\n * @abstract\n * @param {?} index\n * @return {?}\n */\nget(index: number) {}\n/**\n * Returns the number of Views currently attached to this container.\n * @abstract\n * @return {?}\n */\nlength() {}\n/**\n * Instantiates an Embedded View based on the {\\@link TemplateRef `templateRef`} and inserts it\n * into this container at the specified `index`.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * Returns the {\\@link ViewRef} for the newly created View.\n * @abstract\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\ncreateEmbeddedView<C>(templateRef: TemplateRef<C>, context?: C, index?: number) {}\n/**\n * Instantiates a single {\\@link Component} and inserts its Host View into this container at the\n * specified `index`.\n * \n * The component is instantiated using its {\\@link ComponentFactory} which can be\n * obtained via {\\@link ComponentFactoryResolver#resolveComponentFactory}.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * You can optionally specify the {\\@link Injector} that will be used as parent for the Component.\n * \n * Returns the {\\@link ComponentRef} of the Host View created for the newly instantiated Component.\n * @abstract\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} projectableNodes\n * @return {?}\n */\ncreateComponent<C>(\n      componentFactory: ComponentFactory<C>, index?: number, injector?: Injector,\n      projectableNodes?: any[][]) {}\n/**\n * Inserts a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n * \n * If `index` is not specified, the new View will be inserted as the last View in the container.\n * \n * Returns the inserted {\\@link ViewRef}.\n * @abstract\n * @param {?} viewRef\n * @param {?=} index\n * @return {?}\n */\ninsert(viewRef: ViewRef, index?: number) {}\n/**\n * Moves a View identified by a {\\@link ViewRef} into the container at the specified `index`.\n * \n * Returns the inserted {\\@link ViewRef}.\n * @abstract\n * @param {?} viewRef\n * @param {?} currentIndex\n * @return {?}\n */\nmove(viewRef: ViewRef, currentIndex: number) {}\n/**\n * Returns the index of the View, specified via {\\@link ViewRef}, within the current container or\n * `-1` if this container doesn't contain the View.\n * @abstract\n * @param {?} viewRef\n * @return {?}\n */\nindexOf(viewRef: ViewRef) {}\n/**\n * Destroys a View attached to this container at the specified `index`.\n * \n * If `index` is not specified, the last View in the container will be removed.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\nremove(index?: number) {}\n/**\n * Use along with {\\@link #insert} to move a View within the current container.\n * \n * If the `index` param is omitted, the last {\\@link ViewRef} is detached.\n * @abstract\n * @param {?=} index\n * @return {?}\n */\ndetach(index?: number) {}\n}\nexport class ViewContainerRef_ implements ViewContainerRef {\n/**\n * @param {?} _element\n */\nconstructor(private _element: ViewContainer) {}\n/**\n * @param {?} index\n * @return {?}\n */\nget(index: number): ViewRef { return this._element.nestedViews[index].ref; }\n/**\n * @return {?}\n */\nget length(): number {\n    const /** @type {?} */ views = this._element.nestedViews;\n    return isPresent(views) ? views.length : 0;\n  }\n/**\n * @return {?}\n */\nget element(): ElementRef { return this._element.elementRef; }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._element.injector; }\n/**\n * @return {?}\n */\nget parentInjector(): Injector { return this._element.parentInjector; }\n/**\n * @param {?} templateRef\n * @param {?=} context\n * @param {?=} index\n * @return {?}\n */\ncreateEmbeddedView<C>(templateRef: TemplateRef<C>, context: C = null, index: number = -1):\n      EmbeddedViewRef<C> {\n    const /** @type {?} */ viewRef: EmbeddedViewRef<any> = templateRef.createEmbeddedView(context);\n    this.insert(viewRef, index);\n    return viewRef;\n  }\n\n  /** @internal */\n  _createComponentInContainerScope: WtfScopeFn =\n      wtfCreateScope('ViewContainerRef#createComponent()');\n/**\n * @param {?} componentFactory\n * @param {?=} index\n * @param {?=} injector\n * @param {?=} projectableNodes\n * @return {?}\n */\ncreateComponent<C>(\n      componentFactory: ComponentFactory<C>, index: number = -1, injector: Injector = null,\n      projectableNodes: any[][] = null): ComponentRef<C> {\n    const /** @type {?} */ s = this._createComponentInContainerScope();\n    const /** @type {?} */ contextInjector = injector || this._element.parentInjector;\n    const /** @type {?} */ componentRef = componentFactory.create(contextInjector, projectableNodes);\n    this.insert(componentRef.hostView, index);\n    return wtfLeave(s, componentRef);\n  }\n\n  /** @internal */\n  _insertScope = wtfCreateScope('ViewContainerRef#insert()');\n/**\n * @param {?} viewRef\n * @param {?=} index\n * @return {?}\n */\ninsert(viewRef: ViewRef, index: number = -1): ViewRef {\n    const /** @type {?} */ s = this._insertScope();\n    if (index == -1) index = this.length;\n    const /** @type {?} */ viewRef_ = /** @type {?} */(( <ViewRef_<any>>viewRef));\n    this._element.attachView(viewRef_.internalView, index);\n    return wtfLeave(s, viewRef_);\n  }\n/**\n * @param {?} viewRef\n * @param {?} currentIndex\n * @return {?}\n */\nmove(viewRef: ViewRef, currentIndex: number): ViewRef {\n    const /** @type {?} */ s = this._insertScope();\n    if (currentIndex == -1) return;\n    const /** @type {?} */ viewRef_ = /** @type {?} */(( <ViewRef_<any>>viewRef));\n    this._element.moveView(viewRef_.internalView, currentIndex);\n    return wtfLeave(s, viewRef_);\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nindexOf(viewRef: ViewRef): number {\n    return this.length ? this._element.nestedViews.indexOf(( /** @type {?} */((<ViewRef_<any>>viewRef))).internalView) :\n                         -1;\n  }\n\n  /** @internal */\n  _removeScope = wtfCreateScope('ViewContainerRef#remove()');\n/**\n * @param {?=} index\n * @return {?}\n */\nremove(index: number = -1): void {\n    const /** @type {?} */ s = this._removeScope();\n    if (index == -1) index = this.length - 1;\n    const /** @type {?} */ view = this._element.detachView(index);\n    view.destroy();\n    // view is intentionally not returned to the client.\n    wtfLeave(s);\n  }\n\n  /** @internal */\n  _detachScope = wtfCreateScope('ViewContainerRef#detach()');\n/**\n * @param {?=} index\n * @return {?}\n */\ndetach(index: number = -1): ViewRef {\n    const /** @type {?} */ s = this._detachScope();\n    if (index == -1) index = this.length - 1;\n    const /** @type {?} */ view = this._element.detachView(index);\n    return wtfLeave(s, view.ref);\n  }\n/**\n * @return {?}\n */\nclear(): void {\n    for (let /** @type {?} */ i = this.length - 1; i >= 0; i--) {\n      this.remove(i);\n    }\n  }\n}\n\nfunction ViewContainerRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nViewContainerRef_.prototype._createComponentInContainerScope;\n/**\n * \\@internal\n * @type {?}\n */\nViewContainerRef_.prototype._insertScope;\n/**\n * \\@internal\n * @type {?}\n */\nViewContainerRef_.prototype._removeScope;\n/**\n * \\@internal\n * @type {?}\n */\nViewContainerRef_.prototype._detachScope;\n/** @type {?} */\nViewContainerRef_.prototype._element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}