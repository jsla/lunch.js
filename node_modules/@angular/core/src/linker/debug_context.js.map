{"version":3,"file":"debug_context.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/debug_context.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di';\nimport {isBlank, isPresent} from '../facade/lang';\nimport {RenderDebugInfo} from '../render/api';\n\nimport {DebugAppView} from './view';\nimport {ViewType} from './view_type';\nexport class StaticNodeDebugInfo {\n/**\n * @param {?} providerTokens\n * @param {?} componentToken\n * @param {?} refTokens\n */\nconstructor(\npublic providerTokens: any[],\npublic componentToken: any,\npublic refTokens: {[key: string]: any}) {}\n}\n\nfunction StaticNodeDebugInfo_tsickle_Closure_declarations() {\n/** @type {?} */\nStaticNodeDebugInfo.prototype.providerTokens;\n/** @type {?} */\nStaticNodeDebugInfo.prototype.componentToken;\n/** @type {?} */\nStaticNodeDebugInfo.prototype.refTokens;\n}\n\nexport class DebugContext implements RenderDebugInfo {\n/**\n * @param {?} _view\n * @param {?} _nodeIndex\n * @param {?} _tplRow\n * @param {?} _tplCol\n */\nconstructor(\nprivate _view: DebugAppView<any>,\nprivate _nodeIndex: number,\nprivate _tplRow: number,\nprivate _tplCol: number) {}\n/**\n * @return {?}\n */\nprivate get _staticNodeInfo(): StaticNodeDebugInfo {\n    return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;\n  }\n/**\n * @return {?}\n */\nget context() { return this._view.context; }\n/**\n * @return {?}\n */\nget component() {\n    const /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n    if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {\n      return this.injector.get(staticNodeInfo.componentToken);\n    }\n    return null;\n  }\n/**\n * @return {?}\n */\nget componentRenderElement() {\n    let /** @type {?} */ componentView = this._view;\n    while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {\n      componentView = /** @type {?} */(( <DebugAppView<any>>componentView.parentView));\n    }\n    return componentView.parentElement;\n  }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._view.injector(this._nodeIndex); }\n/**\n * @return {?}\n */\nget renderNode(): any {\n    if (isPresent(this._nodeIndex) && this._view.allNodes) {\n      return this._view.allNodes[this._nodeIndex];\n    } else {\n      return null;\n    }\n  }\n/**\n * @return {?}\n */\nget providerTokens(): any[] {\n    const /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n    return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;\n  }\n/**\n * @return {?}\n */\nget source(): string {\n    return `${this._view.componentType.templateUrl}:${this._tplRow}:${this._tplCol}`;\n  }\n/**\n * @return {?}\n */\nget references(): {[key: string]: any} {\n    const /** @type {?} */ varValues: {[key: string]: string} = {};\n    const /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n    if (isPresent(staticNodeInfo)) {\n      const /** @type {?} */ refs = staticNodeInfo.refTokens;\n      Object.keys(refs).forEach(refName => {\n        const /** @type {?} */ refToken = refs[refName];\n        let /** @type {?} */ varValue: any;\n        if (isBlank(refToken)) {\n          varValue = this._view.allNodes ? this._view.allNodes[this._nodeIndex] : null;\n        } else {\n          varValue = this._view.injectorGet(refToken, this._nodeIndex, null);\n        }\n        varValues[refName] = varValue;\n      });\n    }\n    return varValues;\n  }\n}\n\nfunction DebugContext_tsickle_Closure_declarations() {\n/** @type {?} */\nDebugContext.prototype._view;\n/** @type {?} */\nDebugContext.prototype._nodeIndex;\n/** @type {?} */\nDebugContext.prototype._tplRow;\n/** @type {?} */\nDebugContext.prototype._tplCol;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}