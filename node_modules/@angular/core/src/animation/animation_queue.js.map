{"version":3,"file":"animation_queue.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/animation/animation_queue.ts"],"names":[],"mappings":"OAOO,EAAC,UAAU,EAAC,MAAM,gBAAgB;OAClC,EAAC,MAAM,EAAC,MAAM,iBAAiB;AAEtC;IAEA;;OAEG;IACH,wBAAoB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;QAJ1B,YAAO,GAAsB,EAAE,CAAC;IAIH,CAAC;IACrC;;;OAGG;IACH,gCAAO,GAAP,UAAQ,MAAuB,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/D;;OAEG;IACH,8BAAK,GAAL;QAAA,iBAgBG;QAfC,iDAAiD;QACjD,gDAAgD;QAChD,mDAAmD;QACnD,oDAAoD;QACpD,4DAA4D;QAC5D,uDAAuD;QACvD,oDAAoD;QACpD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YACxB,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC;gBAC3B,2DAA2D;gBAC3D,4DAA4D;gBAC5D,oCAAoC;gBACpC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAM,OAAA,KAAI,CAAC,kBAAkB,EAAE,EAAzB,CAAyB,CAAC,CAAC;YAC9D,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IACH;;OAEG;IACK,2CAAkB,GAA1B;QACI,MAAM,CAAC,sBAAsB,EAAE,CAAC;QAEhC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;YAC3B,IAAM,gBAAgB,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;YACrD,4DAA4D;YAC5D,2DAA2D;YAC3D,kDAAkD;YAClD,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;gBACzB,MAAM,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;QACH,CAAC;IACH,CAAC;IACI,yBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,6BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,MAAM,GAAG;KACf,EAF6F,CAE7F,CAAC;IACF,qBAAC;AAAD,CAAC,AAtDD,IAsDC;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,UAAU,CAAC;IAC1B;;;OAGG;IACH,cAAc,CAAC,cAAc,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,OAAO,CAAC;IACjC,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;AAC/B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Injectable} from '../di/metadata';\nimport {NgZone} from '../zone/ng_zone';\nimport {AnimationPlayer} from './animation_player';\nexport class AnimationQueue {\npublic entries: AnimationPlayer[] = [];\n/**\n * @param {?} _zone\n */\nconstructor(private _zone: NgZone) {}\n/**\n * @param {?} player\n * @return {?}\n */\nenqueue(player: AnimationPlayer) { this.entries.push(player); }\n/**\n * @return {?}\n */\nflush() {\n    // given that each animation player may set aside\n    // microtasks and rely on DOM-based events, this\n    // will cause Angular to run change detection after\n    // each request. This sidesteps the issue. If a user\n    // hooks into an animation via (@anim.start) or (@anim.done)\n    // then those methods will automatically trigger change\n    // detection by wrapping themselves inside of a zone\n    if (this.entries.length) {\n      this._zone.runOutsideAngular(() => {\n        // this code is wrapped into a single promise such that the\n        // onStart and onDone player callbacks are triggered outside\n        // of the digest cycle of animations\n        Promise.resolve(null).then(() => this._triggerAnimations());\n      });\n    }\n  }\n/**\n * @return {?}\n */\nprivate _triggerAnimations() {\n    NgZone.assertNotInAngularZone();\n\n    while (this.entries.length) {\n      const /** @type {?} */ player = this.entries.shift();\n      // in the event that an animation throws an error then we do\n      // not want to re-run animations on any previous animations\n      // if they have already been kicked off beforehand\n      if (!player.hasStarted()) {\n        player.play();\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n];\n}\n\nfunction AnimationQueue_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationQueue.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAnimationQueue.ctorParameters;\n/** @type {?} */\nAnimationQueue.prototype.entries;\n/** @type {?} */\nAnimationQueue.prototype._zone;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}