{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/animation/metadata.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPresent} from '../facade/lang';\n\n/**\n * @experimental Animation support is experimental.\n */\nexport const /** @type {?} */ AUTO_STYLE = '*';\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {\\@link trigger trigger\n * animation function} is called.\n * \n * \\@experimental Animation support is experimental.\n */\nexport class AnimationEntryMetadata {\n/**\n * @param {?} name\n * @param {?} definitions\n */\nconstructor(public name: string,\npublic definitions: AnimationStateMetadata[]) {}\n}\n\nfunction AnimationEntryMetadata_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationEntryMetadata.prototype.name;\n/** @type {?} */\nAnimationEntryMetadata.prototype.definitions;\n}\n\n/**\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nexport abstract class AnimationStateMetadata {}\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {\\@link state state animation\n * function} is called.\n * \n * \\@experimental Animation support is experimental.\n */\nexport class AnimationStateDeclarationMetadata extends AnimationStateMetadata {\n/**\n * @param {?} stateNameExpr\n * @param {?} styles\n */\nconstructor(public stateNameExpr: string,\npublic styles: AnimationStyleMetadata) { super(); }\n}\n\nfunction AnimationStateDeclarationMetadata_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationStateDeclarationMetadata.prototype.stateNameExpr;\n/** @type {?} */\nAnimationStateDeclarationMetadata.prototype.styles;\n}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the\n * {\\@link transition transition animation function} is called.\n * \n * \\@experimental Animation support is experimental.\n */\nexport class AnimationStateTransitionMetadata extends AnimationStateMetadata {\n/**\n * @param {?} stateChangeExpr\n * @param {?} steps\n */\nconstructor(public stateChangeExpr: string,\npublic steps: AnimationMetadata) { super(); }\n}\n\nfunction AnimationStateTransitionMetadata_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationStateTransitionMetadata.prototype.stateChangeExpr;\n/** @type {?} */\nAnimationStateTransitionMetadata.prototype.steps;\n}\n\n/**\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nexport abstract class AnimationMetadata {}\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {\\@link keyframes keyframes\n * animation function} is called.\n * \n * \\@experimental Animation support is experimental.\n */\nexport class AnimationKeyframesSequenceMetadata extends AnimationMetadata {\n/**\n * @param {?} steps\n */\nconstructor(public steps: AnimationStyleMetadata[]) { super(); }\n}\n\nfunction AnimationKeyframesSequenceMetadata_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationKeyframesSequenceMetadata.prototype.steps;\n}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {\\@link style style animation\n * function} is called.\n * \n * \\@experimental Animation support is experimental.\n */\nexport class AnimationStyleMetadata extends AnimationMetadata {\n/**\n * @param {?} styles\n * @param {?=} offset\n */\nconstructor(\npublic styles: Array<string|{[key: string]: string | number}>,\npublic offset: number = null) {\n    super();\n  }\n}\n\nfunction AnimationStyleMetadata_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationStyleMetadata.prototype.styles;\n/** @type {?} */\nAnimationStyleMetadata.prototype.offset;\n}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {\\@link animate animate\n * animation function} is called.\n * \n * \\@experimental Animation support is experimental.\n */\nexport class AnimationAnimateMetadata extends AnimationMetadata {\n/**\n * @param {?} timings\n * @param {?} styles\n */\nconstructor(\npublic timings: string|number,\npublic styles: AnimationStyleMetadata|AnimationKeyframesSequenceMetadata) {\n    super();\n  }\n}\n\nfunction AnimationAnimateMetadata_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationAnimateMetadata.prototype.timings;\n/** @type {?} */\nAnimationAnimateMetadata.prototype.styles;\n}\n\n/**\n * \\@experimental Animation support is experimental.\n * @abstract\n */\nexport abstract class AnimationWithStepsMetadata extends AnimationMetadata {\nconstructor() { super(); }\n/**\n * @return {?}\n */\nget steps(): AnimationMetadata[] { throw new Error('NOT IMPLEMENTED: Base Class'); }\n}\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {\\@link sequence sequence\n * animation function} is called.\n * \n * \\@experimental Animation support is experimental.\n */\nexport class AnimationSequenceMetadata extends AnimationWithStepsMetadata {\n/**\n * @param {?} _steps\n */\nconstructor(private _steps: AnimationMetadata[]) { super(); }\n/**\n * @return {?}\n */\nget steps(): AnimationMetadata[] { return this._steps; }\n}\n\nfunction AnimationSequenceMetadata_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationSequenceMetadata.prototype._steps;\n}\n\n/**\n * Metadata representing the entry of animations.\n * Instances of this class are provided via the animation DSL when the {\\@link group group animation\n * function} is called.\n * \n * \\@experimental Animation support is experimental.\n */\nexport class AnimationGroupMetadata extends AnimationWithStepsMetadata {\n/**\n * @param {?} _steps\n */\nconstructor(private _steps: AnimationMetadata[]) { super(); }\n/**\n * @return {?}\n */\nget steps(): AnimationMetadata[] { return this._steps; }\n}\n\nfunction AnimationGroupMetadata_tsickle_Closure_declarations() {\n/** @type {?} */\nAnimationGroupMetadata.prototype._steps;\n}\n\n/**\n * `animate` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n * \n * `animate` specifies an animation step that will apply the provided `styles` data for a given\n * amount of\n * time based on the provided `timing` expression value. Calls to `animate` are expected to be\n * used within {\\@link sequence an animation sequence}, {\\@link group group}, or {\\@link transition\n * transition}.\n * \n * ### Usage\n * \n * The `animate` function accepts two input parameters: `timing` and `styles`:\n * \n * - `timing` is a string based value that can be a combination of a duration with optional\n * delay and easing values. The format for the expression breaks down to `duration delay easing`\n * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,\n * delay=100, easing=ease-out`.\n * If a numeric value is provided then that will be used as the `duration` value in millisecond\n * form.\n * - `styles` is the style input data which can either be a call to {\\@link style style} or {\\@link\n * keyframes keyframes}.\n * If left empty then the styles from the destination state will be collected and used (this is\n * useful when\n * describing an animation step that will complete an animation by {\\@link\n * transition#the-final-animate-call animating to the final state}).\n * \n * ```typescript\n * // various functions for specifying timing data\n * animate(500, style(...))\n * animate(\"1s\", style(...))\n * animate(\"100ms 0.5s\", style(...))\n * animate(\"5s ease\", style(...))\n * animate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n * \n * // either style() of keyframes() can be used\n * animate(500, style({ background: \"red\" }))\n * animate(500, keyframes([\n *   style({ background: \"blue\" })),\n *   style({ background: \"red\" }))\n * ])\n * ```\n * \n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} timing\n * @param {?=} styles\n * @return {?}\n */\nexport function animate(\n    timing: string | number, styles: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata =\n                                 null): AnimationAnimateMetadata {\n  let /** @type {?} */ stylesEntry = styles;\n  if (!isPresent(stylesEntry)) {\n    const /** @type {?} */ EMPTY_STYLE: {[key: string]: string | number} = {};\n    stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);\n  }\n  return new AnimationAnimateMetadata(timing, stylesEntry);\n}\n/**\n * `group` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n * \n * `group` specifies a list of animation steps that are all run in parallel. Grouped animations\n * are useful when a series of styles must be animated/closed off\n * at different statrting/ending times.\n * \n * The `group` function can either be used within a {\\@link sequence sequence} or a {\\@link transition\n * transition}\n * and it will only continue to the next instruction once all of the inner animation steps\n * have completed.\n * \n * ### Usage\n * \n * The `steps` data that is passed into the `group` animation function can either consist\n * of {\\@link style style} or {\\@link animate animate} function calls. Each call to `style()` or\n * `animate()`\n * within a group will be executed instantly (use {\\@link keyframes keyframes} or a\n * {\\@link animate#usage animate() with a delay value} to offset styles to be applied at a later\n * time).\n * \n * ```typescript\n * group([\n *   animate(\"1s\", { background: \"black\" }))\n *   animate(\"2s\", { color: \"white\" }))\n * ])\n * ```\n * \n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nexport function group(steps: AnimationMetadata[]): AnimationGroupMetadata {\n  return new AnimationGroupMetadata(steps);\n}\n/**\n * `sequence` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n * \n * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used\n * by default when an array is passed as animation data into {\\@link transition transition}.)\n * \n * The `sequence` function can either be used within a {\\@link group group} or a {\\@link transition\n * transition}\n * and it will only continue to the next instruction once each of the inner animation steps\n * have completed.\n * \n * To perform animation styling in parallel with other animation steps then\n * have a look at the {\\@link group group} animation function.\n * \n * ### Usage\n * \n * The `steps` data that is passed into the `sequence` animation function can either consist\n * of {\\@link style style} or {\\@link animate animate} function calls. A call to `style()` will apply\n * the\n * provided styling data immediately while a call to `animate()` will apply its styling\n * data over a given time depending on its timing data.\n * \n * ```typescript\n * sequence([\n *   style({ opacity: 0 })),\n *   animate(\"1s\", { opacity: 1 }))\n * ])\n * ```\n * \n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nexport function sequence(steps: AnimationMetadata[]): AnimationSequenceMetadata {\n  return new AnimationSequenceMetadata(steps);\n}\n/**\n * `style` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n * \n * `style` declares a key/value object containing CSS properties/styles that can then\n * be used for {\\@link state animation states}, within an {\\@link sequence animation sequence}, or as\n * styling data for both {\\@link animate animate} and {\\@link keyframes keyframes}.\n * \n * ### Usage\n * \n * `style` takes in a key/value string map as data and expects one or more CSS property/value\n * pairs to be defined.\n * \n * ```typescript\n * // string values are used for css properties\n * style({ background: \"red\", color: \"blue\" })\n * \n * // numerical (pixel) values are also supported\n * style({ width: 100, height: 0 })\n * ```\n * \n * #### Auto-styles (using `*`)\n * \n * When an asterix (`*`) character is used as a value then it will be detected from the element\n * being animated\n * and applied as animation data when the animation starts.\n * \n * This feature proves useful for a state depending on layout and/or environment factors; in such\n * cases\n * the styles are calculated just before the animation starts.\n * \n * ```typescript\n * // the steps below will animate from 0 to the\n * // actual height of the element\n * style({ height: 0 }),\n * animate(\"1s\", style({ height: \"*\" }))\n * ```\n * \n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} tokens\n * @return {?}\n */\nexport function style(\n    tokens: string | {[key: string]: string | number} |\n    Array<string|{[key: string]: string | number}>): AnimationStyleMetadata {\n  let /** @type {?} */ input: Array<{[key: string]: string | number}|string>;\n  let /** @type {?} */ offset: number = null;\n  if (typeof tokens === 'string') {\n    input = [ /** @type {?} */((<string>tokens))];\n  } else {\n    if (Array.isArray(tokens)) {\n      input = /** @type {?} */(( <Array<{[key: string]: string | number}>>tokens));\n    } else {\n      input = [ /** @type {?} */((<{[key: string]: string | number}>tokens))];\n    }\n    input.forEach(entry => {\n      const /** @type {?} */ entryOffset = ( /** @type {?} */((entry as any)) /** TODO #9100 */)['offset'];\n      if (isPresent(entryOffset)) {\n        offset = offset == null ? parseFloat(entryOffset) : offset;\n      }\n    });\n  }\n  return new AnimationStyleMetadata(input, offset);\n}\n/**\n * `state` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n * \n * `state` declares an animation state within the given trigger. When a state is\n * active within a component then its associated styles will persist on\n * the element that the trigger is attached to (even when the animation ends).\n * \n * To animate between states, have a look at the animation {\\@link transition transition}\n * DSL function. To register states to an animation trigger please have a look\n * at the {\\@link trigger trigger} function.\n * \n * #### The `void` state\n * \n * The `void` state value is a reserved word that angular uses to determine when the element is not\n * apart\n * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the\n * associated element\n * is void).\n * \n * #### The `*` (default) state\n * \n * The `*` state (when styled) is a fallback state that will be used if\n * the state that is being animated is not declared within the trigger.\n * \n * ### Usage\n * \n * `state` will declare an animation state with its associated styles\n * within the given trigger.\n * \n * - `stateNameExpr` can be one or more state names separated by commas.\n * - `styles` refers to the {\\@link style styling data} that will be persisted on the element once\n * the state\n * has been reached.\n * \n * ```typescript\n * // \"void\" is a reserved name for a state and is used to represent\n * // the state in which an element is detached from from the application.\n * state(\"void\", style({ height: 0 }))\n * \n * // user-defined states\n * state(\"closed\", style({ height: 0 }))\n * state(\"open, visible\", style({ height: \"*\" }))\n * ```\n * \n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} stateNameExpr\n * @param {?} styles\n * @return {?}\n */\nexport function state(\n    stateNameExpr: string, styles: AnimationStyleMetadata): AnimationStateDeclarationMetadata {\n  return new AnimationStateDeclarationMetadata(stateNameExpr, styles);\n}\n/**\n * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n * \n * `keyframes` specifies a collection of {\\@link style style} entries each optionally characterized\n * by an `offset` value.\n * \n * ### Usage\n * \n * The `keyframes` animation function is designed to be used alongside the {\\@link animate animate}\n * animation function. Instead of applying animations from where they are\n * currently to their destination, keyframes can describe how each style entry is applied\n * and at what point within the animation arc (much like CSS Keyframe Animations do).\n * \n * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at\n * what percentage of the animate time the styles will be applied.\n * \n * ```typescript\n * // the provided offset values describe when each backgroundColor value is applied.\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\", offset: 0 }),\n *   style({ backgroundColor: \"blue\", offset: 0.2 }),\n *   style({ backgroundColor: \"orange\", offset: 0.3 }),\n *   style({ backgroundColor: \"black\", offset: 1 })\n * ]))\n * ```\n * \n * Alternatively, if there are no `offset` values used within the style entries then the offsets\n * will\n * be calculated automatically.\n * \n * ```typescript\n * animate(\"5s\", keyframes([\n *   style({ backgroundColor: \"red\" }) // offset = 0\n *   style({ backgroundColor: \"blue\" }) // offset = 0.33\n *   style({ backgroundColor: \"orange\" }) // offset = 0.66\n *   style({ backgroundColor: \"black\" }) // offset = 1\n * ]))\n * ```\n * \n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} steps\n * @return {?}\n */\nexport function keyframes(steps: AnimationStyleMetadata[]): AnimationKeyframesSequenceMetadata {\n  return new AnimationKeyframesSequenceMetadata(steps);\n}\n/**\n * `transition` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n * \n * `transition` declares the {\\@link sequence sequence of animation steps} that will be run when the\n * provided\n * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`\n * which consists\n * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).\n * \n * Animation transitions are placed within an {\\@link trigger animation trigger}. For an transition\n * to animate to\n * a state value and persist its styles then one or more {\\@link state animation states} is expected\n * to be defined.\n * \n * ### Usage\n * \n * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on\n * what the\n * previous state is and what the current state has become. In other words, if a transition is\n * defined that\n * matches the old/current state criteria then the associated animation will be triggered.\n * \n * ```typescript\n * // all transition/state changes are defined within an animation trigger\n * trigger(\"myAnimationTrigger\", [\n *   // if a state is defined then its styles will be persisted when the\n *   // animation has fully completed itself\n *   state(\"on\", style({ background: \"green\" })),\n *   state(\"off\", style({ background: \"grey\" })),\n * \n *   // a transition animation that will be kicked off when the state value\n *   // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n *   transition(\"on => off\", animate(500)),\n * \n *   // it is also possible to do run the same animation for both directions\n *   transition(\"on <=> off\", animate(500)),\n * \n *   // or to define multiple states pairs separated by commas\n *   transition(\"on => off, off => void\", animate(500)),\n * \n *   // this is a catch-all state change for when an element is inserted into\n *   // the page and the destination state is unknown\n *   transition(\"void => *\", [\n *     style({ opacity: 0 }),\n *     animate(500)\n *   ]),\n * \n *   // this will capture a state change between any states\n *   transition(\"* => *\", animate(\"1s 0s\")),\n * ])\n * ```\n * \n * The template associated with this component will make use of the `myAnimationTrigger`\n * animation trigger by binding to an element within its template code.\n * \n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n * \n * #### The final `animate` call\n * \n * If the final step within the transition steps is a call to `animate()` that **only**\n * uses a timing value with **no style data** then it will be automatically used as the final\n * animation\n * arc for the element to animate itself to the final state. This involves an automatic mix of\n * adding/removing CSS styles so that the element will be in the exact state it should be for the\n * applied state to be presented correctly.\n * \n * ```\n * // start off by hiding the element, but make sure that it animates properly to whatever state\n * // is currently active for \"myAnimationTrigger\"\n * transition(\"void => *\", [\n *   style({ opacity: 0 }),\n *   animate(500)\n * ])\n * ```\n * \n * ### Transition Aliases (`:enter` and `:leave`)\n * \n * Given that enter (insertion) and leave (removal) animations are so common,\n * the `transition` function accepts both `:enter` and `:leave` values which\n * are aliases for the `void => *` and `* => void` state changes.\n * \n * ```\n * transition(\":enter\", [\n *   style({ opacity: 0 }),\n *   animate(500, style({ opacity: 1 }))\n * ])\n * transition(\":leave\", [\n *   animate(500, style({ opacity: 0 }))\n * ])\n * ```\n * \n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} stateChangeExpr\n * @param {?} steps\n * @return {?}\n */\nexport function transition(stateChangeExpr: string, steps: AnimationMetadata | AnimationMetadata[]):\n    AnimationStateTransitionMetadata {\n  const /** @type {?} */ animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;\n  return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);\n}\n/**\n * `trigger` is an animation-specific function that is designed to be used inside of Angular2's\n * animation\n * DSL language. If this information is new, please navigate to the\n * {\\@link Component#animations-anchor component animations metadata\n * page} to gain a better understanding of how animations in Angular2 are used.\n * \n * `trigger` Creates an animation trigger which will a list of {\\@link state state} and {\\@link\n * transition transition}\n * entries that will be evaluated when the expression bound to the trigger changes.\n * \n * Triggers are registered within the component annotation data under the\n * {\\@link Component#animations-anchor animations section}. An animation trigger can\n * be placed on an element within a template by referencing the name of the\n * trigger followed by the expression value that the trigger is bound to\n * (in the form of `[\\@triggerName]=\"expression\"`.\n * \n * ### Usage\n * \n * `trigger` will create an animation trigger reference based on the provided `name` value.\n * The provided `animation` value is expected to be an array consisting of {\\@link state state} and\n * {\\@link transition transition}\n * declarations.\n * \n * ```typescript\n * \\@Component({ \n *   selector: 'my-component',\n *   templateUrl: 'my-component-tpl.html',\n *   animations: [\n *     trigger(\"myAnimationTrigger\", [\n *       state(...),\n *       state(...),\n *       transition(...),\n *       transition(...)\n *     ])\n *   ]\n * })\n * class MyComponent {\n *   myStatusExp = \"something\";\n * }\n * ```\n * \n * The template associated with this component will make use of the `myAnimationTrigger`\n * animation trigger by binding to an element within its template code.\n * \n * ```html\n * <!-- somewhere inside of my-component-tpl.html -->\n * <div [\\@myAnimationTrigger]=\"myStatusExp\">...</div>\n * ```\n * \n * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))\n * \n * {\\@example core/animation/ts/dsl/animation_example.ts region='Component'}\n * \n * \\@experimental Animation support is experimental.\n * @param {?} name\n * @param {?} animation\n * @return {?}\n */\nexport function trigger(name: string, animation: AnimationMetadata[]): AnimationEntryMetadata {\n  return new AnimationEntryMetadata(name, animation);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}