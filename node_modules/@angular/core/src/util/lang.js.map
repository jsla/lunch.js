{"version":3,"file":"lang.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/util/lang.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAC,YAAY,IAAI,gBAAgB,EAAC,MAAM,wBAAwB;AACvE;;;;GAIG;AACH,0BAA0B,GAAQ;IAChC,2CAA2C;IAC3C,qEAAqE;IACrE,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,UAAU,CAAC;AACjD,CAAC;AACD;;;;GAIG;AACH,6BAA6B,GAA0B;IACrD,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;AAC1C,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {$$observable as symbolObservable} from 'rxjs/symbol/observable';\n/**\n * Determine if the argument is shaped like a Promise\n * @param {?} obj\n * @return {?}\n */\nexport function isPromise(obj: any): obj is Promise<any> {\n  // allow any Promise/A+ compliant thenable.\n  // It's up to the caller to ensure that obj.then conforms to the spec\n  return !!obj && typeof obj.then === 'function';\n}\n/**\n * Determine if the argument is an Observable\n * @param {?} obj\n * @return {?}\n */\nexport function isObservable(obj: any | Observable<any>): obj is Observable<any> {\n  return !!(obj && obj[symbolObservable]);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}