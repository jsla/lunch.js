{"version":3,"file":"upgrade_adapter.js","sourceRoot":"","sources":["../../../../modules/@angular/upgrade/src/upgrade_adapter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CssSelector, SelectorMatcher, createElementCssSelector} from '@angular/compiler';\nimport {Compiler, CompilerOptions, ComponentFactory, Injector, NgModule, NgModuleRef, NgZone, Provider, Testability, Type} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport * as angular from './angular_js';\nimport {NG1_COMPILE, NG1_INJECTOR, NG1_PARSE, NG1_ROOT_SCOPE, NG1_TESTABILITY, NG2_COMPILER, NG2_COMPONENT_FACTORY_REF_MAP, NG2_INJECTOR, NG2_ZONE, REQUIRE_INJECTOR} from './constants';\nimport {DowngradeNg2ComponentAdapter} from './downgrade_ng2_adapter';\nimport {ComponentInfo, getComponentInfo} from './metadata';\nimport {UpgradeNg1ComponentAdapterBuilder} from './upgrade_ng1_adapter';\nimport {Deferred, controllerKey, getAttributesAsArray, onError} from './util';\n\nlet /** @type {?} */ upgradeCount: number = 0;\n/**\n * Use `UpgradeAdapter` to allow Angular 1 and Angular 2+ to coexist in a single application.\n * \n * The `UpgradeAdapter` allows:\n * 1. creation of Angular 2+ component from Angular 1 component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of Angular 1 directive from Angular 2+ component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n * \n * ## Mental Model\n * \n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n * \n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. Angular 1 directives always execute inside Angular 1 framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular 2+ components always execute inside Angular 2+ framework codebase regardless of\n *    where they are instantiated.\n * 5. An Angular 1 component can be upgraded to an Angular 2+ component. This creates an\n *    Angular 2+ directive, which bootstraps the Angular 1 component directive in that location.\n * 6. An Angular 2+ component can be downgraded to an Angular 1 component directive. This creates\n *    an Angular 1 directive, which bootstraps the Angular 2+ component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular 2+ syntax.\n * 8. Angular 1 is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular 2+ zone, and therefore it no longer needs calls to\n *    `$apply()`.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n * \n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * \n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * \n * ```\n * \n * \\@stable\n */\nexport class UpgradeAdapter {\nprivate idPrefix: string = `NG2_UPGRADE_${upgradeCount++}_`;\nprivate upgradedComponents: Type<any>[] = [];\nprivate ng1ComponentsToBeUpgraded: {[name: string]: UpgradeNg1ComponentAdapterBuilder} = {};\nprivate providers: Provider[] = [];\nprivate ngZone: NgZone;\nprivate ng1Module: angular.IModule;\nprivate moduleRef: NgModuleRef<any> = null;\nprivate ng2BootstrapDeferred: Deferred<angular.IInjectorService>;\n/**\n * @param {?} ng2AppModule\n * @param {?=} compilerOptions\n */\nconstructor(private ng2AppModule: Type<any>,\nprivate compilerOptions?: CompilerOptions) {\n    if (!ng2AppModule) {\n      throw new Error(\n          'UpgradeAdapter cannot be instantiated without an NgModule of the Angular 2 app.');\n    }\n  }\n/**\n * Allows Angular 2+ Component to be used from Angular 1.\n * \n * Use `downgradeNg2Component` to create an Angular 1 Directive Definition Factory from\n * Angular 2+ Component. The adapter will bootstrap Angular 2+ component from within the\n * Angular 1 template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in Angular 1 template. This means that the\n *    host element is controlled by Angular 1, but the component's view will be controlled by\n *    Angular 2+.\n * 2. Even thought the component is instantiated in Angular 1, it will be using Angular 2+\n *    syntax. This has to be done, this way because we must follow Angular 2+ components do not\n *    declare how the attributes should be interpreted.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n * - Content projection: yes\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n * \n * \\@Component({ \n *   selector: 'greet',\n *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n * })\n * class Greeter {\n *   \\@Input() salutation: string;\n *   \\@Input() name: string;\n * }\n * \n * \\@NgModule({ \n *   declarations: [Greeter],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML =\n *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n * });\n * ```\n * @param {?} type\n * @return {?}\n */\ndowngradeNg2Component(type: Type<any>): Function {\n    this.upgradedComponents.push(type);\n    const /** @type {?} */ info: ComponentInfo = getComponentInfo(type);\n    return ng1ComponentDirective(info, `${this.idPrefix}${info.selector}_c`);\n  }\n/**\n * Allows Angular 1 Component to be used from Angular 2+.\n * \n * Use `upgradeNg1Component` to create an Angular 2+ component from Angular 1 Component\n * directive. The adapter will bootstrap Angular 1 component from within the Angular 2+\n * template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in Angular 2+ template. This means that the\n *    host element is controlled by Angular 2+, but the component's view will be controlled by\n *    Angular 1.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n * - Transclusion: yes\n * - Only some of the features of\n *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n *   supported:\n *   - `compile`: not supported because the host element is owned by Angular 2+, which does\n *     not allow modifying DOM structure during compilation.\n *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n *   - `controllerAs`: supported.\n *   - `bindToController`: supported.\n *   - `link`: supported. (NOTE: only pre-link function is supported.)\n *   - `name`: supported.\n *   - `priority`: ignored.\n *   - `replace`: not supported.\n *   - `require`: supported.\n *   - `restrict`: must be set to 'E'.\n *   - `scope`: supported.\n *   - `template`: supported.\n *   - `templateUrl`: supported.\n *   - `terminal`: ignored.\n *   - `transclude`: supported.\n * \n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * \n * module.directive('greet', function() {\n *   return {\n *     scope: {salutation: '=', name: '=' },\n *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n *   };\n * });\n * \n * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n * \n * \\@Component({ \n *   selector: 'ng2',\n *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2></ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n * });\n * ```\n * @param {?} name\n * @return {?}\n */\nupgradeNg1Component(name: string): Type<any> {\n    if (( /** @type {?} */((<any>this.ng1ComponentsToBeUpgraded))).hasOwnProperty(name)) {\n      return this.ng1ComponentsToBeUpgraded[name].type;\n    } else {\n      return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n          .type;\n    }\n  }\n/**\n * Registers the adapter's Angular 1 upgrade module for unit testing in Angular 1.\n * Use this instead of `angular.mock.module()` to load the upgrade module into\n * the Angular 1 testing injector.\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * \n * // configure the adapter with upgrade/downgrade components and services\n * upgradeAdapter.downgradeNg2Component(MyComponent);\n * \n * let upgradeAdapterRef: UpgradeAdapterRef;\n * let $compile, $rootScope;\n * \n * // We must register the adapter before any calls to `inject()`\n * beforeEach(() => {\n *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n * });\n * \n * beforeEach(inject((_$compile_, _$rootScope_) => {\n *   $compile = _$compile_;\n *   $rootScope = _$rootScope_;\n * }));\n * \n * it(\"says hello\", (done) => {\n *   upgradeAdapterRef.ready(() => {\n *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n *     $rootScope.$apply();\n *     expect(element.html()).toContain(\"Hello World\");\n *     done();\n *   })\n * });\n * \n * ```\n * \n * @param {?=} modules any Angular 1 modules that the upgrade module should depend upon\n * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n * run assertions once the Angular 2+ components are ready to test through Angular 1.\n */\nregisterForNg1Tests(modules?: string[]): UpgradeAdapterRef {\n    const /** @type {?} */ windowNgMock = ( /** @type {?} */((window as any)))['angular'].mock;\n    if (!windowNgMock || !windowNgMock.module) {\n      throw new Error('Failed to find \\'angular.mock.module\\'.');\n    }\n    this.declareNg1Module(modules);\n    windowNgMock.module(this.ng1Module.name);\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n    this.ng2BootstrapDeferred.promise.then(\n        (ng1Injector) => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); }, onError);\n    return upgrade;\n  }\n/**\n * Bootstrap a hybrid Angular 1 / Angular 2+ application.\n * \n * This `bootstrap` method is a direct replacement (takes same arguments) for Angular 1\n * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n * Angular 1, this bootstrap is asynchronous.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(MyNg2Module);\n * const module = angular.module('myExample', []);\n * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n * \n * module.directive('ng1', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n * })\n * class Ng2 {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * ```\n * @param {?} element\n * @param {?=} modules\n * @param {?=} config\n * @return {?}\n */\nbootstrap(element: Element, modules?: any[], config?: angular.IAngularBootstrapConfig):\n      UpgradeAdapterRef {\n    this.declareNg1Module(modules);\n\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const /** @type {?} */ windowAngular = ( /** @type {?} */((window as any)) /** TODO #???? */)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    this.ngZone.run(() => { angular.bootstrap(element, [this.ng1Module.name], config); });\n    const /** @type {?} */ ng1BootstrapPromise = new Promise((resolve) => {\n      if (windowAngular.resumeBootstrap) {\n        const /** @type {?} */ originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n        windowAngular.resumeBootstrap = function() {\n          windowAngular.resumeBootstrap = originalResumeBootstrap;\n          windowAngular.resumeBootstrap.apply(this, arguments);\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n    });\n\n    Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(([ng1Injector]) => {\n      angular.element(element).data(controllerKey(NG2_INJECTOR), this.moduleRef.injector);\n      this.moduleRef.injector.get(NgZone).run(\n          () => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); });\n    }, onError);\n    return upgrade;\n  }\n/**\n * Allows Angular 1 service to be accessible from Angular 2+.\n * \n * \n * ### Example\n * \n * ```\n * class Login { ... }\n * class Server { ... }\n * \n * \\@Injectable() \n * class Example {\n *   constructor(\\@Inject('server') server, login: Login) {\n *     ...\n *   }\n * }\n * \n * const module = angular.module('myExample', []);\n * module.service('server', Server);\n * module.service('login', Login);\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * adapter.upgradeNg1Provider('server');\n * adapter.upgradeNg1Provider('login', {asToken: Login});\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng2Injector.get(Example);\n * });\n * \n * ```\n * @param {?} name\n * @param {?=} options\n * @return {?}\n */\npublic upgradeNg1Provider(name: string, options?: {asToken: any}) {\n    const /** @type {?} */ token = options && options.asToken || name;\n    this.providers.push({\n      provide: token,\n      useFactory: (ng1Injector: angular.IInjectorService) => ng1Injector.get(name),\n      deps: [NG1_INJECTOR]\n    });\n  }\n/**\n * Allows Angular 2+ service to be accessible from Angular 1.\n * \n * \n * ### Example\n * \n * ```\n * class Example {\n * }\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * \n * const module = angular.module('myExample', []);\n * module.factory('example', adapter.downgradeNg2Provider(Example));\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng1Injector.get('example');\n * });\n * \n * ```\n * @param {?} token\n * @return {?}\n */\npublic downgradeNg2Provider(token: any): Function {\n    const /** @type {?} */ factory = function(injector: Injector) { return injector.get(token); };\n    ( /** @type {?} */((<any>factory))).$inject = [NG2_INJECTOR];\n    return factory;\n  }\n/**\n * Declare the Angular 1 upgrade module for this adapter without bootstrapping the whole\n * hybrid application.\n * \n * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n * \n * @param {?=} modules The Angular 1 modules that this upgrade module should depend upon.\n * @return {?} The Angular 1 upgrade module that is declared by this method\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * upgradeAdapter.declareNg1Module(['heroApp']);\n * ```\n */\nprivate declareNg1Module(modules: string[] = []): angular.IModule {\n    const /** @type {?} */ delayApplyExps: Function[] = [];\n    let /** @type {?} */ original$applyFn: Function;\n    let /** @type {?} */ rootScopePrototype: any;\n    let /** @type {?} */ rootScope: angular.IRootScopeService;\n    const /** @type {?} */ componentFactoryRefMap: ComponentFactoryRefMap = {};\n    const /** @type {?} */ upgradeAdapter = this;\n    const /** @type {?} */ ng1Module = this.ng1Module = angular.module(this.idPrefix, modules);\n    const /** @type {?} */ platformRef = platformBrowserDynamic();\n\n    this.ngZone = new NgZone({enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec')});\n    this.ng2BootstrapDeferred = new Deferred();\n    ng1Module.factory(NG2_INJECTOR, () => this.moduleRef.injector.get(Injector))\n        .constant(NG2_ZONE, this.ngZone)\n        .constant(NG2_COMPONENT_FACTORY_REF_MAP, componentFactoryRefMap)\n        .factory(NG2_COMPILER, () => this.moduleRef.injector.get(Compiler))\n        .config([\n          '$provide', '$injector',\n          (provide: angular.IProvideService, ng1Injector: angular.IInjectorService) => {\n            provide.decorator(NG1_ROOT_SCOPE, [\n              '$delegate',\n              function(rootScopeDelegate: angular.IRootScopeService) {\n                // Capture the root apply so that we can delay first call to $apply until we\n                // bootstrap Angular 2 and then we replay and restore the $apply.\n                rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                if (rootScopePrototype.hasOwnProperty('$apply')) {\n                  original$applyFn = rootScopePrototype.$apply;\n                  rootScopePrototype.$apply = (exp: any) => delayApplyExps.push(exp);\n                } else {\n                  throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                }\n                return rootScope = rootScopeDelegate;\n              }\n            ]);\n            if (ng1Injector.has(NG1_TESTABILITY)) {\n              provide.decorator(NG1_TESTABILITY, [\n                '$delegate',\n                function(testabilityDelegate: angular.ITestabilityService) {\n                  const /** @type {?} */ originalWhenStable: Function = testabilityDelegate.whenStable;\n                  // Cannot use arrow function below because we need the context\n                  const /** @type {?} */ newWhenStable = function(callback: Function) {\n                    originalWhenStable.call(this, function() {\n                      const /** @type {?} */ ng2Testability: Testability =\n                          upgradeAdapter.moduleRef.injector.get(Testability);\n                      if (ng2Testability.isStable()) {\n                        callback.apply(this, arguments);\n                      } else {\n                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                      }\n                    });\n                  };\n\n                  testabilityDelegate.whenStable = newWhenStable;\n                  return testabilityDelegate;\n                }\n              ]);\n            }\n          }\n        ]);\n\n    ng1Module.run([\n      '$injector', '$rootScope',\n      (ng1Injector: angular.IInjectorService, rootScope: angular.IRootScopeService) => {\n        UpgradeNg1ComponentAdapterBuilder.resolve(this.ng1ComponentsToBeUpgraded, ng1Injector)\n            .then(() => {\n              // At this point we have ng1 injector and we have lifted ng1 components into ng2, we\n              // now can bootstrap ng2.\n              const /** @type {?} */ DynamicNgUpgradeModule =\n                  NgModule({\n                    providers: [\n                      {provide: NG1_INJECTOR, useFactory: () => ng1Injector},\n                      {provide: NG1_COMPILE, useFactory: () => ng1Injector.get(NG1_COMPILE)},\n                      this.providers\n                    ],\n                    imports: [this.ng2AppModule]\n                  }).Class({\n                    constructor: function DynamicNgUpgradeModule() {},\n                    ngDoBootstrap: function() {}\n                  });\n              ( /** @type {?} */((platformRef as any)))\n                  ._bootstrapModuleWithZone(\n                      DynamicNgUpgradeModule, this.compilerOptions, this.ngZone,\n                      (componentFactories: ComponentFactory<any>[]) => {\n                        componentFactories.forEach((componentFactory) => {\n                          const /** @type {?} */ type: Type<any> = componentFactory.componentType;\n                          if (this.upgradedComponents.indexOf(type) !== -1) {\n                            componentFactoryRefMap[getComponentInfo(type).selector] =\n                                componentFactory;\n                          }\n                        });\n                      })\n                  .then((ref: NgModuleRef<any>) => {\n                    this.moduleRef = ref;\n                    this.ngZone.run(() => {\n                      if (rootScopePrototype) {\n                        rootScopePrototype.$apply = original$applyFn;  // restore original $apply\n                        while (delayApplyExps.length) {\n                          rootScope.$apply(delayApplyExps.shift());\n                        }\n                        rootScopePrototype = null;\n                      }\n                    });\n                  })\n                  .then(() => this.ng2BootstrapDeferred.resolve(ng1Injector), onError)\n                  .then(() => {\n                    let /** @type {?} */ subscription =\n                        this.ngZone.onMicrotaskEmpty.subscribe({next: () => rootScope.$digest()});\n                    rootScope.$on('$destroy', () => { subscription.unsubscribe(); });\n                  });\n            })\n            .catch((e) => this.ng2BootstrapDeferred.reject(e));\n      }\n    ]);\n\n    return ng1Module;\n  }\n}\n\nfunction UpgradeAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapter.prototype.idPrefix;\n/** @type {?} */\nUpgradeAdapter.prototype.upgradedComponents;\n/**\n * An internal map of ng1 components which need to up upgraded to ng2.\n * \n * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n * \n * \\@internal\n * @type {?}\n */\nUpgradeAdapter.prototype.ng1ComponentsToBeUpgraded;\n/** @type {?} */\nUpgradeAdapter.prototype.providers;\n/** @type {?} */\nUpgradeAdapter.prototype.ngZone;\n/** @type {?} */\nUpgradeAdapter.prototype.ng1Module;\n/** @type {?} */\nUpgradeAdapter.prototype.moduleRef;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2BootstrapDeferred;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2AppModule;\n/** @type {?} */\nUpgradeAdapter.prototype.compilerOptions;\n}\n\n\ninterface ComponentFactoryRefMap {\n  [selector: string]: ComponentFactory<any>;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nclass ParentInjectorPromise {\nprivate injector: Injector;\nprivate callbacks: ((injector: Injector) => any)[] = [];\n/**\n * @param {?} element\n */\nconstructor(private element: angular.IAugmentedJQuery) {\n    // store the promise on the element\n    element.data(controllerKey(NG2_INJECTOR), this);\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nthen(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nresolve(injector: Injector) {\n    this.injector = injector;\n\n    // reset the element data to point to the real injector\n    this.element.data(controllerKey(NG2_INJECTOR), injector);\n\n    // clean out the element to prevent memory leaks\n    this.element = null;\n\n    // run all the queued callbacks\n    this.callbacks.forEach((callback) => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nParentInjectorPromise.prototype.injector;\n/** @type {?} */\nParentInjectorPromise.prototype.callbacks;\n/** @type {?} */\nParentInjectorPromise.prototype.element;\n}\n\n/**\n * @param {?} info\n * @param {?} idPrefix\n * @return {?}\n */\nfunction ng1ComponentDirective(info: ComponentInfo, idPrefix: string): Function {\n  ( /** @type {?} */((<any>directiveFactory))).$inject =\n      [NG1_INJECTOR, NG1_COMPILE, NG2_COMPONENT_FACTORY_REF_MAP, NG1_PARSE];\n/**\n * @param {?} ng1Injector\n * @param {?} ng1Compile\n * @param {?} componentFactoryRefMap\n * @param {?} parse\n * @return {?}\n */\nfunction directiveFactory(\n      ng1Injector: angular.IInjectorService, ng1Compile: angular.ICompileService,\n      componentFactoryRefMap: ComponentFactoryRefMap,\n      parse: angular.IParseService): angular.IDirective {\n    let /** @type {?} */ idCount = 0;\n    let /** @type {?} */ dashSelector = info.selector.replace(/[A-Z]/g, char => '-' + char.toLowerCase());\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: REQUIRE_INJECTOR,\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             parentInjector: Injector | ParentInjectorPromise): void => {\n        // We might have compile the contents lazily, because this might have been triggered by the\n        // UpgradeNg1ComponentAdapterBuilder, when the ng2 templates have not been compiled yet\n\n        let /** @type {?} */ id = idPrefix + (idCount++);\n        ( /** @type {?} */((<any>element[0]))).id = id;\n\n        let /** @type {?} */ injectorPromise = new ParentInjectorPromise(element);\n\n        const /** @type {?} */ ng2Compiler = /** @type {?} */(( ng1Injector.get(NG2_COMPILER) as Compiler));\n        const /** @type {?} */ ngContentSelectors = ng2Compiler.getNgContentSelectors(info.type);\n        const /** @type {?} */ linkFns = compileProjectedNodes(element, ngContentSelectors);\n\n        const /** @type {?} */ componentFactory: ComponentFactory<any> = componentFactoryRefMap[info.selector];\n        if (!componentFactory) throw new Error('Expecting ComponentFactory for: ' + info.selector);\n\n        element.empty();\n        let /** @type {?} */ projectableNodes = linkFns.map(link => {\n          let /** @type {?} */ projectedClone: Node[];\n          link(scope, (clone: Node[]) => {\n            projectedClone = clone;\n            element.append(clone);\n          });\n          return projectedClone;\n        });\n\n        parentInjector = parentInjector || ng1Injector.get(NG2_INJECTOR);\n\n        if (parentInjector instanceof ParentInjectorPromise) {\n          parentInjector.then((resolvedInjector: Injector) => downgrade(resolvedInjector));\n        } else {\n          downgrade(parentInjector);\n        }\n/**\n * @param {?} injector\n * @return {?}\n */\nfunction downgrade(injector: Injector) {\n          const /** @type {?} */ facade = new DowngradeNg2ComponentAdapter(\n              info, element, attrs, scope, injector, parse, componentFactory);\n          facade.setupInputs();\n          facade.bootstrapNg2(projectableNodes);\n          facade.setupOutputs();\n          facade.registerCleanup();\n          injectorPromise.resolve(facade.componentRef.injector);\n        }\n      }\n    };\n/**\n * @param {?} element\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction compileProjectedNodes(\n        element: angular.IAugmentedJQuery, ngContentSelectors: string[]): angular.ILinkFn[] {\n      if (!ngContentSelectors)\n        throw new Error('Expecting ngContentSelectors for: ' + info.selector);\n      // We have to sort the projected content before we compile it, hence the terminal: true\n      let /** @type {?} */ projectableTemplateNodes = sortProjectableNodes(ngContentSelectors, element.contents());\n      return projectableTemplateNodes.map(nodes => ng1Compile(nodes));\n    }\n  }\n  return directiveFactory;\n}\n/**\n * Use `UpgradeAdapterRef` to control a hybrid Angular 1 / Angular 2+ application.\n * \n * \\@stable\n */\nexport class UpgradeAdapterRef {\nprivate _readyFn: (upgradeAdapterRef?: UpgradeAdapterRef) => void = null;\npublic ng1RootScope: angular.IRootScopeService = null;\npublic ng1Injector: angular.IInjectorService = null;\npublic ng2ModuleRef: NgModuleRef<any> = null;\npublic ng2Injector: Injector = null;\n/**\n * @param {?} ngModuleRef\n * @param {?} ng1Injector\n * @return {?}\n */\nprivate _bootstrapDone(ngModuleRef: NgModuleRef<any>, ng1Injector: angular.IInjectorService) {\n    this.ng2ModuleRef = ngModuleRef;\n    this.ng2Injector = ngModuleRef.injector;\n    this.ng1Injector = ng1Injector;\n    this.ng1RootScope = ng1Injector.get(NG1_ROOT_SCOPE);\n    this._readyFn && this._readyFn(this);\n  }\n/**\n * Register a callback function which is notified upon successful hybrid Angular 1 / Angular 2+\n * application has been bootstrapped.\n * \n * The `ready` callback function is invoked inside the Angular 2+ zone, therefore it does not\n * require a call to `$apply()`.\n * @param {?} fn\n * @return {?}\n */\npublic ready(fn: (upgradeAdapterRef?: UpgradeAdapterRef) => void) { this._readyFn = fn; }\n/**\n * Dispose of running hybrid Angular 1 / Angular 2+ application.\n * @return {?}\n */\npublic dispose() {\n    this.ng1Injector.get(NG1_ROOT_SCOPE).$destroy();\n    this.ng2ModuleRef.destroy();\n  }\n}\n\nfunction UpgradeAdapterRef_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapterRef.prototype._readyFn;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1RootScope;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1Injector;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2ModuleRef;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2Injector;\n}\n\n/**\n * Sort a set of DOM nodes that into groups based on the given content selectors\n * @param {?} ngContentSelectors\n * @param {?} childNodes\n * @return {?}\n */\nexport function sortProjectableNodes(ngContentSelectors: string[], childNodes: Node[]): Node[][] {\n  let /** @type {?} */ projectableNodes: Node[][] = [];\n  let /** @type {?} */ matcher = new SelectorMatcher();\n  let /** @type {?} */ wildcardNgContentIndex: number;\n  for (let /** @type {?} */ i = 0, /** @type {?} */ ii = ngContentSelectors.length; i < ii; i++) {\n    projectableNodes[i] = [];\n    if (ngContentSelectors[i] === '*') {\n      wildcardNgContentIndex = i;\n    } else {\n      matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);\n    }\n  }\n  for (let /** @type {?} */ node of childNodes) {\n    let /** @type {?} */ ngContentIndices: number[] = [];\n    let /** @type {?} */ selector =\n        createElementCssSelector(node.nodeName.toLowerCase(), getAttributesAsArray(node));\n    matcher.match(\n        selector, (selector, ngContentIndex) => { ngContentIndices.push(ngContentIndex); });\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== undefined) {\n      ngContentIndices.push(wildcardNgContentIndex);\n    }\n    if (ngContentIndices.length > 0) {\n      projectableNodes[ngContentIndices[0]].push(node);\n    }\n  }\n  return projectableNodes;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}