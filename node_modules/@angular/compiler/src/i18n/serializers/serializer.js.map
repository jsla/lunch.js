{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../../../../../modules/@angular/compiler/src/i18n/serializers/serializer.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH;;GAEG;AACH;IAAA;IAyBA,CAAC;IAxBD;;;;OAIG;IACH,0BAAK,GAAL,UAAM,QAAwB,IAAG,CAAC;IAClC;;;;;OAKG;IACH,yBAAI,GAAJ,UAAK,OAAe,EAAE,GAAW,IAAG,CAAC;IACrC;;;;OAIG;IACH,2BAAM,GAAN,UAAO,OAAqB,IAAG,CAAC;IAChC;;;OAGG;IACH,qCAAgB,GAAhB,UAAiB,OAAqB,IAAuB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3E,iBAAC;AAAD,CAAC,AAzBD,IAyBC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as i18n from '../i18n_ast';\n/**\n * @abstract\n */\nexport abstract class Serializer {\n/**\n * @abstract\n * @param {?} messages\n * @return {?}\n */\nwrite(messages: i18n.Message[]) {}\n/**\n * @abstract\n * @param {?} content\n * @param {?} url\n * @return {?}\n */\nload(content: string, url: string) {}\n/**\n * @abstract\n * @param {?} message\n * @return {?}\n */\ndigest(message: i18n.Message) {}\n/**\n * @param {?} message\n * @return {?}\n */\ncreateNameMapper(message: i18n.Message): PlaceholderMapper { return null; }\n}\n\n/**\n * A `PlaceholderMapper` converts placeholder names from internal to serialized representation and\n * back.\n *\n * It should be used for serialization format that put constraints on the placeholder names.\n */\nexport interface PlaceholderMapper {\n  toPublicName(internalName: string): string;\n\n  toInternalName(publicName: string): string;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}