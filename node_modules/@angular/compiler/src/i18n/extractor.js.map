{"version":3,"file":"extractor.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/i18n/extractor.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n/**\n * Extract i18n messages from source code\n */\nimport {ViewEncapsulation} from '@angular/core';\n\nimport {analyzeAndValidateNgModules, extractProgramSymbols} from '../aot/compiler';\nimport {StaticAndDynamicReflectionCapabilities} from '../aot/static_reflection_capabilities';\nimport {StaticReflector} from '../aot/static_reflector';\nimport {StaticSymbolCache} from '../aot/static_symbol';\nimport {StaticSymbolResolver, StaticSymbolResolverHost} from '../aot/static_symbol_resolver';\nimport {AotSummaryResolver, AotSummaryResolverHost} from '../aot/summary_resolver';\nimport {CompileDirectiveMetadata} from '../compile_metadata';\nimport {CompilerConfig} from '../config';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {InterpolationConfig} from '../ml_parser/interpolation_config';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {ParseError} from '../parse_util';\nimport {PipeResolver} from '../pipe_resolver';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {createOfflineCompileUrlResolver} from '../url_resolver';\n\nimport {I18NHtmlParser} from './i18n_html_parser';\nimport {MessageBundle} from './message_bundle';\n\n/**\n * The host of the Extractor disconnects the implementation from TypeScript / other language\n * services and from underlying file systems.\n */\nexport interface ExtractorHost extends StaticSymbolResolverHost, AotSummaryResolverHost {\n  /**\n   * Loads a resource (e.g. html / css)\n   */\n  loadResource(path: string): Promise<string>;\n}\nexport class Extractor {\n/**\n * @param {?} host\n * @param {?} staticSymbolResolver\n * @param {?} messageBundle\n * @param {?} metadataResolver\n */\nconstructor(\npublic host: ExtractorHost,\nprivate staticSymbolResolver: StaticSymbolResolver,\nprivate messageBundle: MessageBundle,\nprivate metadataResolver: CompileMetadataResolver) {}\n/**\n * @param {?} rootFiles\n * @return {?}\n */\nextract(rootFiles: string[]): Promise<MessageBundle> {\n    const /** @type {?} */ programSymbols = extractProgramSymbols(this.staticSymbolResolver, rootFiles, this.host);\n    const {files, ngModules} =\n        analyzeAndValidateNgModules(programSymbols, this.host, this.metadataResolver);\n    return Promise\n        .all(ngModules.map(\n            ngModule => this.metadataResolver.loadNgModuleDirectiveAndPipeMetadata(\n                ngModule.type.reference, false)))\n        .then(() => {\n          const /** @type {?} */ errors: ParseError[] = [];\n\n          files.forEach(file => {\n            const /** @type {?} */ compMetas: CompileDirectiveMetadata[] = [];\n            file.directives.forEach(directiveType => {\n              const /** @type {?} */ dirMeta = this.metadataResolver.getDirectiveMetadata(directiveType);\n              if (dirMeta && dirMeta.isComponent) {\n                compMetas.push(dirMeta);\n              }\n            });\n            compMetas.forEach(compMeta => {\n              const /** @type {?} */ html = compMeta.template.template;\n              const /** @type {?} */ interpolationConfig =\n                  InterpolationConfig.fromArray(compMeta.template.interpolation);\n              errors.push(\n                  ...this.messageBundle.updateFromTemplate(html, file.srcUrl, interpolationConfig));\n            });\n          });\n\n          if (errors.length) {\n            throw new Error(errors.map(e => e.toString()).join('\\n'));\n          }\n\n          return this.messageBundle;\n        });\n  }\n/**\n * @param {?} host\n * @return {?}\n */\nstatic create(host: ExtractorHost): {extractor: Extractor, staticReflector: StaticReflector} {\n    const /** @type {?} */ htmlParser = new I18NHtmlParser(new HtmlParser());\n\n    const /** @type {?} */ urlResolver = createOfflineCompileUrlResolver();\n    const /** @type {?} */ symbolCache = new StaticSymbolCache();\n    const /** @type {?} */ summaryResolver = new AotSummaryResolver(host, symbolCache);\n    const /** @type {?} */ staticSymbolResolver = new StaticSymbolResolver(host, symbolCache, summaryResolver);\n    const /** @type {?} */ staticReflector = new StaticReflector(staticSymbolResolver);\n    StaticAndDynamicReflectionCapabilities.install(staticReflector);\n\n    const /** @type {?} */ config = new CompilerConfig({\n      genDebugInfo: false,\n      defaultEncapsulation: ViewEncapsulation.Emulated,\n      logBindingUpdate: false,\n      useJit: false\n    });\n\n    const /** @type {?} */ normalizer = new DirectiveNormalizer(\n        {get: (url: string) => host.loadResource(url)}, urlResolver, htmlParser, config);\n    const /** @type {?} */ elementSchemaRegistry = new DomElementSchemaRegistry();\n    const /** @type {?} */ resolver = new CompileMetadataResolver(\n        new NgModuleResolver(staticReflector), new DirectiveResolver(staticReflector),\n        new PipeResolver(staticReflector), summaryResolver, elementSchemaRegistry, normalizer,\n        staticReflector);\n\n    // TODO(vicb): implicit tags & attributes\n    const /** @type {?} */ messageBundle = new MessageBundle(htmlParser, [], {});\n\n    const /** @type {?} */ extractor = new Extractor(host, staticSymbolResolver, messageBundle, resolver);\n    return {extractor, staticReflector};\n  }\n}\n\nfunction Extractor_tsickle_Closure_declarations() {\n/** @type {?} */\nExtractor.prototype.host;\n/** @type {?} */\nExtractor.prototype.staticSymbolResolver;\n/** @type {?} */\nExtractor.prototype.messageBundle;\n/** @type {?} */\nExtractor.prototype.metadataResolver;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}