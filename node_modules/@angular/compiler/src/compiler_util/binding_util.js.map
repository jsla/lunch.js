{"version":3,"file":"binding_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/compiler_util/binding_util.ts"],"names":[],"mappings":"OAOO,EAAC,WAAW,EAAE,gBAAgB,EAAC,MAAM,gBAAgB;OAErD,KAAK,CAAC,MAAM,sBAAsB;AAGzC;IACA;;;OAGG;IACH,2BAAmB,UAA0B,EACtC,SAAiB;QADL,eAAU,GAAV,UAAU,CAAgB;QACtC,cAAS,GAAT,SAAS,CAAQ;IAAG,CAAC;IAC5B,wBAAC;AAAD,CAAC,AAPD,IAOC;AAED;IACA,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC;IACvC,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,SAAS,CAAC;AACtC,CAAC;AAED;;;GAGG;AACH,wCAAwC,OAAqB;IAC3D,IAAM,gBAAgB,CAAC,SAAS,GAAG,KAAG,OAAO,CAAC,MAAM,CAAC,MAAQ,CAAC;IAC9D,IAAM,gBAAgB,CAAC,SAAS,GAAG,mBAAmB,CAAC,SAAS,CAAC,CAAC;IAClE,2EAA2E;IAC3E,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACtF,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;SAC3B,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC;SAC9D,MAAM,EAAE,CAAC,CAAC;IACtC,MAAM,CAAC,IAAI,iBAAiB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AACrD,CAAC;AACD;;;;;;GAMG;AACH,uCACI,UAAwC,EAAE,SAAyB,EACnE,gBAA8B,EAAE,OAAsB;IACxD,IAAI,gBAAgB,CAAC,SAAS,GAAiB,CAAC,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC;QAC7G,gBAAgB,EAAE,SAAS,EAAE,UAAU,CAAC,WAAW;KACpD,CAAC,CAAC;IACH,EAAE,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QAC3B,SAAS,GAAG,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;IACnD,CAAC;IACD,MAAM,CACD,UAAU,CAAC,KAAK;QAAE,IAAI,CAAC,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAkB,CAC/D,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,MAAM,EAAG,CAAC;SACrF,CAAC,CAAC;MACJ,CAAC;AACJ,CAAC;AACD;;;GAGG;AACH,6BAA6B,SAAiB;IAC5C,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,WAAS,SAAW,CAAC,CAAC;AAChD,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Identifiers, createIdentifier} from '../identifiers';\nimport {ClassBuilder} from '../output/class_builder';\nimport * as o from '../output/output_ast';\n\nimport {ConvertPropertyBindingResult} from './expression_converter';\nexport class CheckBindingField {\n/**\n * @param {?} expression\n * @param {?} bindingId\n */\nconstructor(public expression: o.ReadPropExpr,\npublic bindingId: string) {}\n}\n\nfunction CheckBindingField_tsickle_Closure_declarations() {\n/** @type {?} */\nCheckBindingField.prototype.expression;\n/** @type {?} */\nCheckBindingField.prototype.bindingId;\n}\n\n/**\n * @param {?} builder\n * @return {?}\n */\nexport function createCheckBindingField(builder: ClassBuilder): CheckBindingField {\n  const /** @type {?} */ bindingId = `${builder.fields.length}`;\n  const /** @type {?} */ fieldExpr = createBindFieldExpr(bindingId);\n  // private is fine here as no child view will reference the cached value...\n  builder.fields.push(new o.ClassField(fieldExpr.name, null, [o.StmtModifier.Private]));\n  builder.ctorStmts.push(o.THIS_EXPR.prop(fieldExpr.name)\n                             .set(o.importExpr(createIdentifier(Identifiers.UNINITIALIZED)))\n                             .toStmt());\n  return new CheckBindingField(fieldExpr, bindingId);\n}\n/**\n * @param {?} evalResult\n * @param {?} fieldExpr\n * @param {?} throwOnChangeVar\n * @param {?} actions\n * @return {?}\n */\nexport function createCheckBindingStmt(\n    evalResult: ConvertPropertyBindingResult, fieldExpr: o.ReadPropExpr,\n    throwOnChangeVar: o.Expression, actions: o.Statement[]): o.Statement[] {\n  let /** @type {?} */ condition: o.Expression = o.importExpr(createIdentifier(Identifiers.checkBinding)).callFn([\n    throwOnChangeVar, fieldExpr, evalResult.currValExpr\n  ]);\n  if (evalResult.forceUpdate) {\n    condition = evalResult.forceUpdate.or(condition);\n  }\n  return [\n    ...evalResult.stmts, new o.IfStmt(condition, actions.concat([ /** @type {?} */((\n      <o.Statement>o.THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt()))\n    ]))\n  ];\n}\n/**\n * @param {?} bindingId\n * @return {?}\n */\nfunction createBindFieldExpr(bindingId: string): o.ReadPropExpr {\n  return o.THIS_EXPR.prop(`_expr_${bindingId}`);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}