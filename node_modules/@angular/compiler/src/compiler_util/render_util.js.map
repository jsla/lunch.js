{"version":3,"file":"render_util.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/compiler_util/render_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SecurityContext} from '@angular/core';\n\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, createIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {EMPTY_STATE as EMPTY_ANIMATION_STATE} from '../private_import_core';\nimport {BoundElementPropertyAst, BoundEventAst, PropertyBindingType} from '../template_parser/template_ast';\n\nimport {createEnumExpression} from './identifier_util';\n/**\n * @param {?} view\n * @param {?} boundProp\n * @param {?} renderElement\n * @param {?} renderValue\n * @param {?} logBindingUpdate\n * @param {?=} securityContextExpression\n * @return {?}\n */\nexport function writeToRenderer(\n    view: o.Expression, boundProp: BoundElementPropertyAst, renderElement: o.Expression,\n    renderValue: o.Expression, logBindingUpdate: boolean,\n    securityContextExpression?: o.Expression): o.Statement[] {\n  const /** @type {?} */ updateStmts: o.Statement[] = [];\n  const /** @type {?} */ renderer = view.prop('renderer');\n  renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);\n  switch (boundProp.type) {\n    case PropertyBindingType.Property:\n      if (logBindingUpdate) {\n        updateStmts.push(\n            o.importExpr(createIdentifier(Identifiers.setBindingDebugInfo))\n                .callFn([renderer, renderElement, o.literal(boundProp.name), renderValue])\n                .toStmt());\n      }\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementProperty', [renderElement, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Attribute:\n      renderValue =\n          renderValue.isBlank().conditional(o.NULL_EXPR, renderValue.callMethod('toString', []));\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementAttribute', [renderElement, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Class:\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementClass', [renderElement, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Style:\n      let /** @type {?} */ strValue: o.Expression = renderValue.callMethod('toString', []);\n      if (isPresent(boundProp.unit)) {\n        strValue = strValue.plus(o.literal(boundProp.unit));\n      }\n\n      renderValue = renderValue.isBlank().conditional(o.NULL_EXPR, strValue);\n      updateStmts.push(\n          renderer\n              .callMethod(\n                  'setElementStyle', [renderElement, o.literal(boundProp.name), renderValue])\n              .toStmt());\n      break;\n    case PropertyBindingType.Animation:\n      throw new Error('Illegal state: Should not come here!');\n  }\n  return updateStmts;\n}\n/**\n * @param {?} view\n * @param {?} boundProp\n * @param {?} renderValue\n * @param {?=} securityContextExpression\n * @return {?}\n */\nfunction sanitizedValue(\n    view: o.Expression, boundProp: BoundElementPropertyAst, renderValue: o.Expression,\n    securityContextExpression?: o.Expression): o.Expression {\n  if (boundProp.securityContext === SecurityContext.NONE) {\n    return renderValue;  // No sanitization needed.\n  }\n  if (!boundProp.needsRuntimeSecurityContext) {\n    securityContextExpression =\n        createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);\n  }\n  if (!securityContextExpression) {\n    throw new Error(`internal error, no SecurityContext given ${boundProp.name}`);\n  }\n  const /** @type {?} */ ctx = view.prop('viewUtils').prop('sanitizer');\n  const /** @type {?} */ args = [securityContextExpression, renderValue];\n  return ctx.callMethod('sanitize', args);\n}\n/**\n * @param {?} view\n * @param {?} componentView\n * @param {?} boundProp\n * @param {?} boundOutputs\n * @param {?} eventListener\n * @param {?} renderElement\n * @param {?} renderValue\n * @param {?} lastRenderValue\n * @return {?}\n */\nexport function triggerAnimation(\n    view: o.Expression, componentView: o.Expression, boundProp: BoundElementPropertyAst,\n    boundOutputs: BoundEventAst[], eventListener: o.Expression, renderElement: o.Expression,\n    renderValue: o.Expression, lastRenderValue: o.Expression) {\n  const /** @type {?} */ detachStmts: o.Statement[] = [];\n  const /** @type {?} */ updateStmts: o.Statement[] = [];\n\n  const /** @type {?} */ animationName = boundProp.name;\n\n  const /** @type {?} */ animationFnExpr =\n      componentView.prop('componentType').prop('animations').key(o.literal(animationName));\n\n  // it's important to normalize the void value as `void` explicitly\n  // so that the styles data can be obtained from the stringmap\n  const /** @type {?} */ emptyStateValue = o.literal(EMPTY_ANIMATION_STATE);\n  const /** @type {?} */ unitializedValue = o.importExpr(createIdentifier(Identifiers.UNINITIALIZED));\n  const /** @type {?} */ animationTransitionVar = o.variable('animationTransition_' + animationName);\n\n  updateStmts.push(\n      animationTransitionVar\n          .set(animationFnExpr.callFn([\n            view, renderElement,\n            lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue),\n            renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)\n          ]))\n          .toDeclStmt());\n\n  detachStmts.push(\n      animationTransitionVar\n          .set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue]))\n          .toDeclStmt());\n\n  const /** @type {?} */ registerStmts: o.Statement[] = [];\n  const /** @type {?} */ animationStartMethodExists = boundOutputs.find(\n      event => event.isAnimation && event.name == animationName && event.phase == 'start');\n  if (animationStartMethodExists) {\n    registerStmts.push(\n        animationTransitionVar\n            .callMethod(\n                'onStart',\n                [eventListener.callMethod(\n                    o.BuiltinMethod.Bind,\n                    [view, o.literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])\n            .toStmt());\n  }\n\n  const /** @type {?} */ animationDoneMethodExists = boundOutputs.find(\n      event => event.isAnimation && event.name == animationName && event.phase == 'done');\n  if (animationDoneMethodExists) {\n    registerStmts.push(\n        animationTransitionVar\n            .callMethod(\n                'onDone',\n                [eventListener.callMethod(\n                    o.BuiltinMethod.Bind,\n                    [view, o.literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])\n            .toStmt());\n  }\n\n  updateStmts.push(...registerStmts);\n  detachStmts.push(...registerStmts);\n\n  return {updateStmts, detachStmts};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}