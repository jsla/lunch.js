{"version":3,"file":"pipe_resolver.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/pipe_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;OAEI,EAAC,IAAI,EAAQ,iBAAiB,EAAC,MAAM,eAAe;OAEpD,EAAC,WAAW,EAAC,MAAM,qBAAqB;OACxC,EAAC,SAAS,EAAC,MAAM,eAAe;OAChC,EAAC,kBAAkB,EAAC,MAAM,cAAc;OACxC,EAAC,eAAe,EAAE,SAAS,EAAC,MAAM,uBAAuB;AAChE;;;GAGG;AACH,yBAAyB,IAAS;IAChC,MAAM,CAAC,IAAI,YAAY,IAAI,CAAC;AAC9B,CAAC;AACD;;;;;;GAMG;AAEH;IACA;;OAEG;IACH,sBAAoB,UAAuC;QAA/C,0BAA+C,GAA/C,sBAA+C;QAAvC,eAAU,GAAV,UAAU,CAA6B;IAAG,CAAC;IAC/D;;;OAGG;IACH,6BAAM,GAAN,UAAO,IAAe;QAClB,IAAM,gBAAgB,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,YAAY,IAAI,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC5D,CAAC;IACH;;;;;OAKG;IACH,8BAAO,GAAP,UAAQ,IAAe,EAAE,eAAsB;QAAtB,+BAAsB,GAAtB,sBAAsB;QAC3C,IAAM,gBAAgB,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QACpF,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,IAAM,gBAAgB,CAAC,UAAU,GAAG,WAAW,CAAC,QAAQ,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;YACjF,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;gBACf,MAAM,CAAC,UAAU,CAAC;YACpB,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,gCAA8B,SAAS,CAAC,IAAI,CAAG,CAAC,CAAC;QACnE,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAhCH;QAAC,kBAAkB,EAAE;;oBAAA;IAiCrB,mBAAC;AAAD,CAAC,AAhCD,IAgCC;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,UAAU,CAAC;AAClC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Pipe, Type, resolveForwardRef} from '@angular/core';\n\nimport {ListWrapper} from './facade/collection';\nimport {stringify} from './facade/lang';\nimport {CompilerInjectable} from './injectable';\nimport {ReflectorReader, reflector} from './private_import_core';\n/**\n * @param {?} type\n * @return {?}\n */\nfunction _isPipeMetadata(type: any): boolean {\n  return type instanceof Pipe;\n}\n/**\n * Resolve a `Type` for {\\@link Pipe}.\n * \n * This interface can be overridden by the application developer to create custom behavior.\n * \n * See {\\@link Compiler}\n */\n@CompilerInjectable()\nexport class PipeResolver {\n/**\n * @param {?=} _reflector\n */\nconstructor(private _reflector: ReflectorReader = reflector) {}\n/**\n * @param {?} type\n * @return {?}\n */\nisPipe(type: Type<any>) {\n    const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    return typeMetadata && typeMetadata.some(_isPipeMetadata);\n  }\n/**\n * Return {\\@link Pipe} for a given `Type`.\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?}\n */\nresolve(type: Type<any>, throwIfNotFound = true): Pipe {\n    const /** @type {?} */ metas = this._reflector.annotations(resolveForwardRef(type));\n    if (metas) {\n      const /** @type {?} */ annotation = ListWrapper.findLast(metas, _isPipeMetadata);\n      if (annotation) {\n        return annotation;\n      }\n    }\n    if (throwIfNotFound) {\n      throw new Error(`No Pipe decorator found on ${stringify(type)}`);\n    }\n    return null;\n  }\n}\n\nfunction PipeResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nPipeResolver.prototype._reflector;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}