{"version":3,"file":"summary_serializer.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/aot/summary_serializer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CompileNgModuleSummary, CompileSummaryKind, CompileTypeSummary} from '../compile_metadata';\nimport {Summary, SummaryResolver} from '../summary_resolver';\nimport {ValueTransformer, visitValue} from '../util';\n\nimport {StaticSymbol, StaticSymbolCache} from './static_symbol';\nimport {ResolvedStaticSymbol, StaticSymbolResolver} from './static_symbol_resolver';\n\nconst /** @type {?} */ STRIP_SRC_FILE_SUFFIXES = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\n\n\nexport interface AotSummarySerializerHost {\n  /**\n   * Returns the output file path of a source file.\n   * E.g.\n   * `some_file.ts` -> `some_file.d.ts`\n   */\n  getOutputFileName(sourceFilePath: string): string;\n  /**\n   * Returns whether a file is a source file or not.\n   */\n  isSourceFile(sourceFilePath: string): boolean;\n}\n/**\n * @param {?} host\n * @param {?} summaryResolver\n * @param {?} symbolResolver\n * @param {?} symbols\n * @param {?} types\n * @return {?}\n */\nexport function serializeSummaries(\n    host: AotSummarySerializerHost, summaryResolver: SummaryResolver<StaticSymbol>,\n    symbolResolver: StaticSymbolResolver,\n\n    symbols: ResolvedStaticSymbol[], types: CompileTypeSummary[]): string {\n  const /** @type {?} */ serializer = new Serializer(host);\n\n  // for symbols, we use everything except for the class metadata itself\n  // (we keep the statics though), as the class metadata is contained in the\n  // CompileTypeSummary.\n  symbols.forEach(\n      (resolvedSymbol) => serializer.addOrMergeSummary(\n          {symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata}));\n  // Add summaries that are referenced by the given symbols (transitively)\n  // Note: the serializer.symbols array might be growing while\n  // we execute the loop!\n  for (let /** @type {?} */ processedIndex = 0; processedIndex < serializer.symbols.length; processedIndex++) {\n    const /** @type {?} */ symbol = serializer.symbols[processedIndex];\n    if (!host.isSourceFile(symbol.filePath)) {\n      let /** @type {?} */ summary = summaryResolver.resolveSummary(symbol);\n      if (!summary) {\n        // some symbols might originate from a plain typescript library\n        // that just exported .d.ts and .metadata.json files, i.e. where no summary\n        // files were created.\n        const /** @type {?} */ resolvedSymbol = symbolResolver.resolveSymbol(symbol);\n        if (resolvedSymbol) {\n          summary = {symbol: resolvedSymbol.symbol, metadata: resolvedSymbol.metadata};\n        }\n      }\n      if (summary) {\n        serializer.addOrMergeSummary(summary);\n      }\n    }\n  }\n\n  // Add type summaries.\n  // Note: We don't add the summaries of all referenced symbols as for the ResolvedSymbols,\n  // as the type summaries already contain the transitive data that they require\n  // (in a minimal way).\n  types.forEach((typeSummary) => {\n    serializer.addOrMergeSummary(\n        {symbol: typeSummary.type.reference, metadata: {__symbolic: 'class'}, type: typeSummary});\n    if (typeSummary.summaryKind === CompileSummaryKind.NgModule) {\n      const /** @type {?} */ ngModuleSummary = /** @type {?} */(( <CompileNgModuleSummary>typeSummary));\n      ngModuleSummary.exportedDirectives.concat(ngModuleSummary.exportedPipes).forEach((id) => {\n        const /** @type {?} */ symbol: StaticSymbol = id.reference;\n        if (!host.isSourceFile(symbol.filePath)) {\n          serializer.addOrMergeSummary(summaryResolver.resolveSummary(symbol));\n        }\n      });\n    }\n  });\n  return serializer.serialize();\n}\n/**\n * @param {?} symbolCache\n * @param {?} json\n * @return {?}\n */\nexport function deserializeSummaries(\n    symbolCache: StaticSymbolCache, json: string): Summary<StaticSymbol>[] {\n  const /** @type {?} */ deserializer = new Deserializer(symbolCache);\n  return deserializer.deserialize(json);\n}\n/**\n * @param {?} fileName\n * @return {?}\n */\nexport function summaryFileName(fileName: string): string {\n  const /** @type {?} */ fileNameWithoutSuffix = fileName.replace(STRIP_SRC_FILE_SUFFIXES, '');\n  return `${fileNameWithoutSuffix}.ngsummary.json`;\n}\nclass Serializer extends ValueTransformer {\n  symbols: StaticSymbol[] = [];\nprivate indexBySymbol = new Map<StaticSymbol, number>();\nprivate processedSummaryBySymbol = new Map<StaticSymbol, any>();\nprivate processedSummaries: any[] = [];\n/**\n * @param {?} host\n */\nconstructor(private host: AotSummarySerializerHost) { super(); }\n/**\n * @param {?} summary\n * @return {?}\n */\naddOrMergeSummary(summary: Summary<StaticSymbol>) {\n    let /** @type {?} */ symbolMeta = summary.metadata;\n    if (symbolMeta && symbolMeta.__symbolic === 'class') {\n      // For classes, we only keep their statics, but not the metadata\n      // of the class itself as that has been captured already via other summaries\n      // (e.g. DirectiveSummary, ...).\n      symbolMeta = {__symbolic: 'class', statics: symbolMeta.statics};\n    }\n\n    let /** @type {?} */ processedSummary = this.processedSummaryBySymbol.get(summary.symbol);\n    if (!processedSummary) {\n      processedSummary = this.processValue({symbol: summary.symbol});\n      this.processedSummaries.push(processedSummary);\n      this.processedSummaryBySymbol.set(summary.symbol, processedSummary);\n    }\n    // Note: == by purpose to compare with undefined!\n    if (processedSummary.metadata == null && symbolMeta != null) {\n      processedSummary.metadata = this.processValue(symbolMeta);\n    }\n    // Note: == by purpose to compare with undefined!\n    if (processedSummary.type == null && summary.type != null) {\n      processedSummary.type = this.processValue(summary.type);\n    }\n  }\n/**\n * @return {?}\n */\nserialize(): string {\n    return JSON.stringify({\n      summaries: this.processedSummaries,\n      symbols: this.symbols.map((symbol, index) => {\n        return {\n          __symbol: index,\n          name: symbol.name,\n          // We convert the source filenames tinto output filenames,\n          // as the generated summary file will be used when teh current\n          // compilation unit is used as a library\n          filePath: this.host.getOutputFileName(symbol.filePath)\n        };\n      })\n    });\n  }\n/**\n * @param {?} value\n * @return {?}\n */\nprivate processValue(value: any): any { return visitValue(value, this, null); }\n/**\n * @param {?} value\n * @param {?} context\n * @return {?}\n */\nvisitOther(value: any, context: any): any {\n    if (value instanceof StaticSymbol) {\n      let /** @type {?} */ index = this.indexBySymbol.get(value);\n      // Note: == by purpose to compare with undefined!\n      if (index == null) {\n        index = this.indexBySymbol.size;\n        this.indexBySymbol.set(value, index);\n        this.symbols.push(value);\n      }\n      return {__symbol: index};\n    }\n  }\n}\n\nfunction Serializer_tsickle_Closure_declarations() {\n/** @type {?} */\nSerializer.prototype.symbols;\n/** @type {?} */\nSerializer.prototype.indexBySymbol;\n/** @type {?} */\nSerializer.prototype.processedSummaryBySymbol;\n/** @type {?} */\nSerializer.prototype.processedSummaries;\n/** @type {?} */\nSerializer.prototype.host;\n}\n\nclass Deserializer extends ValueTransformer {\nprivate symbols: StaticSymbol[];\n/**\n * @param {?} symbolCache\n */\nconstructor(private symbolCache: StaticSymbolCache) { super(); }\n/**\n * @param {?} json\n * @return {?}\n */\ndeserialize(json: string): Summary<StaticSymbol>[] {\n    const /** @type {?} */ data: {summaries: any[], symbols: any[]} = JSON.parse(json);\n    this.symbols = data.symbols.map(\n        serializedSymbol => this.symbolCache.get(serializedSymbol.filePath, serializedSymbol.name));\n    return visitValue(data.summaries, this, null);\n  }\n/**\n * @param {?} map\n * @param {?} context\n * @return {?}\n */\nvisitStringMap(map: {[key: string]: any}, context: any): any {\n    if ('__symbol' in map) {\n      return this.symbols[map['__symbol']];\n    } else {\n      return super.visitStringMap(map, context);\n    }\n  }\n}\n\nfunction Deserializer_tsickle_Closure_declarations() {\n/** @type {?} */\nDeserializer.prototype.symbols;\n/** @type {?} */\nDeserializer.prototype.symbolCache;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}