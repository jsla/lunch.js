{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/facade/errors.ts"],"names":[],"mappings":";;;;;AACA;;;GAGG;AACH;IACE,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;AACnC,CAAC;AACD;;GAEG;AACH;IAA+B,6BAAK;IAGpC;;OAEG;IACH,mBAAY,OAAe;QACvB,kBAAM,OAAO,CAAC,CAAC;QACf,qEAAqE;QACrE,8DAA8D;QAC9D,8CAA8C;QAC9C,oDAAoD;QACpD,IAAM,WAAW,GAAG,IAAI,KAAK,CAAC,OAAO,CAAiB,CAAC;QACvD,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAIH,sBAAI,8BAAO;QAHX;;WAEG;aACH,cAAgB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;QACnD;;;WAGG;aACH,UAAY,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC;;;OALV;IASnD,sBAAI,2BAAI;QAHR;;WAEG;aACH,cAAa,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAI7C,sBAAI,4BAAK;QAHT;;WAEG;aACH,cAAc,MAAM,CAAC,CAAkB,CAAE,IAAI,CAAC,YAAoB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7E;;;WAGG;aACH,UAAU,KAAK,IAAI,CAAkB,CAAE,IAAI,CAAC,YAAoB,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;;;OALN;IAM7E;;OAEG;IACH,4BAAQ,GAAR,cAAa,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACnD,gBAAC;AAAD,CAAC,AAzCD,CAA+B,KAAK,GAyCnC;AAED;IACA;;;OAGG;IACH,SAAS,CAAC,SAAS,CAAC,YAAY,CAAC;AACjC,CAAC;AAED;;GAEG;AACH;IAAkC,gCAAS;IAE3C;;;OAGG;IACH,sBAAY,OAAe,EAAE,KAAU;QACnC,kBAAS,OAAO,qBAAe,KAAK,YAAY,KAAK,GAAG,KAAK,CAAC,OAAO,GAAE,KAAK,CAAG,CAAC,CAAC;QACjF,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7B,CAAC;IAIH,sBAAI,+BAAK;QAHT;;WAEG;aACH;YACI,MAAM,CAAC,CAAkB,CAAE,CAAC,IAAI,CAAC,aAAa,YAAY,KAAK,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,YAAY,CAAS,CAAC,CAAC;iBAC9G,KAAK,CAAC;QACb,CAAC;;;OAAA;IACH,mBAAC;AAAD,CAAC,AAjBD,CAAkC,SAAS,GAiB1C;AAED;IACA,gBAAgB;IAChB,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC;AACrC,CAAC","sourcesContent":["\n/**\n * Convenience to throw an Error with 'unimplemented' as the message.\n * @return {?}\n */\nexport function unimplemented(): any {\n  throw new Error('unimplemented');\n}\n/**\n * \\@stable\n */\nexport class BaseError extends Error {\n  /** @internal **/\n  _nativeError: Error;\n/**\n * @param {?} message\n */\nconstructor(message: string) {\n    super(message);\n    // Errors don't use current this, instead they create a new instance.\n    // We have to do forward all of our api to the nativeInstance.\n    // TODO(bradfordcsmith): Remove this hack when\n    //     google/closure-compiler/issues/2102 is fixed.\n    const nativeError = new Error(message) as any as Error;\n    this._nativeError = nativeError;\n  }\n/**\n * @return {?}\n */\nget message() { return this._nativeError.message; }\n/**\n * @param {?} message\n * @return {?}\n */\nset message(message) { this._nativeError.message = message; }\n/**\n * @return {?}\n */\nget name() { return this._nativeError.name; }\n/**\n * @return {?}\n */\nget stack() { return ( /** @type {?} */((this._nativeError as any))).stack; }\n/**\n * @param {?} value\n * @return {?}\n */\nset stack(value) { ( /** @type {?} */((this._nativeError as any))).stack = value; }\n/**\n * @return {?}\n */\ntoString() { return this._nativeError.toString(); }\n}\n\nfunction BaseError_tsickle_Closure_declarations() {\n/**\n * \\@internal *\n * @type {?}\n */\nBaseError.prototype._nativeError;\n}\n\n/**\n * \\@stable\n */\nexport class WrappedError extends BaseError {\n  originalError: any;\n/**\n * @param {?} message\n * @param {?} error\n */\nconstructor(message: string, error: any) {\n    super(`${message} caused by: ${error instanceof Error ? error.message: error }`);\n    this.originalError = error;\n  }\n/**\n * @return {?}\n */\nget stack() {\n    return ( /** @type {?} */(((this.originalError instanceof Error ? this.originalError : this._nativeError) as any)))\n        .stack;\n  }\n}\n\nfunction WrappedError_tsickle_Closure_declarations() {\n/** @type {?} */\nWrappedError.prototype.originalError;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}