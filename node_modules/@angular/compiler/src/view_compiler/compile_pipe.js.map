{"version":3,"file":"compile_pipe.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/compile_pipe.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompilePipeSummary, tokenReference} from '../compile_metadata';\nimport {createPureProxy} from '../compiler_util/identifier_util';\nimport {Identifiers, createIdentifier, resolveIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\n\nimport {CompileView} from './compile_view';\nimport {getPropertyInView, injectFromViewParentInjector} from './util';\nexport class CompilePipe {\n/**\n * @param {?} view\n * @param {?} name\n * @param {?} args\n * @return {?}\n */\nstatic call(view: CompileView, name: string, args: o.Expression[]): o.Expression {\n    const /** @type {?} */ compView = view.componentView;\n    const /** @type {?} */ meta = _findPipeMeta(compView, name);\n    let /** @type {?} */ pipe: CompilePipe;\n    if (meta.pure) {\n      // pure pipes live on the component view\n      pipe = compView.purePipes.get(name);\n      if (!pipe) {\n        pipe = new CompilePipe(compView, meta);\n        compView.purePipes.set(name, pipe);\n        compView.pipes.push(pipe);\n      }\n    } else {\n      // Non pure pipes live on the view that called it\n      pipe = new CompilePipe(view, meta);\n      view.pipes.push(pipe);\n    }\n    return pipe._call(view, args);\n  }\n\n  instance: o.ReadPropExpr;\nprivate _purePipeProxyCount = 0;\n/**\n * @param {?} view\n * @param {?} meta\n */\nconstructor(public view: CompileView,\npublic meta: CompilePipeSummary) {\n    this.instance = o.THIS_EXPR.prop(`_pipe_${meta.name}_${view.pipeCount++}`);\n    const deps = this.meta.type.diDeps.map((diDep) => {\n      if (tokenReference(diDep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {\n        return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n      }\n      return injectFromViewParentInjector(view, diDep.token, false);\n    });\n    this.view.fields.push(new o.ClassField(this.instance.name, o.importType(this.meta.type)));\n    this.view.createMethod.resetDebugInfo(null, null);\n    this.view.createMethod.addStmt(o.THIS_EXPR.prop(this.instance.name)\n                                       .set(o.importExpr(this.meta.type).instantiate(deps))\n                                       .toStmt());\n  }\n/**\n * @return {?}\n */\nget pure(): boolean { return this.meta.pure; }\n/**\n * @param {?} callingView\n * @param {?} args\n * @return {?}\n */\nprivate _call(callingView: CompileView, args: o.Expression[]): o.Expression {\n    if (this.meta.pure) {\n      // PurePipeProxies live on the view that called them.\n      const /** @type {?} */ purePipeProxyInstance =\n          o.THIS_EXPR.prop(`${this.instance.name}_${this._purePipeProxyCount++}`);\n      const /** @type {?} */ pipeInstanceSeenFromPureProxy =\n          getPropertyInView(this.instance, callingView, this.view);\n      createPureProxy(\n          pipeInstanceSeenFromPureProxy.prop('transform')\n              .callMethod(o.BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]),\n          args.length, purePipeProxyInstance,\n          {fields: callingView.fields, ctorStmts: callingView.createMethod});\n      return o.importExpr(createIdentifier(Identifiers.castByValue))\n          .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])\n          .callFn(args);\n    } else {\n      return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);\n    }\n  }\n}\n\nfunction CompilePipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCompilePipe.prototype.instance;\n/** @type {?} */\nCompilePipe.prototype._purePipeProxyCount;\n/** @type {?} */\nCompilePipe.prototype.view;\n/** @type {?} */\nCompilePipe.prototype.meta;\n}\n\n/**\n * @param {?} view\n * @param {?} name\n * @return {?}\n */\nfunction _findPipeMeta(view: CompileView, name: string): CompilePipeSummary {\n  let /** @type {?} */ pipeMeta: CompilePipeSummary = null;\n  for (let /** @type {?} */ i = view.pipeMetas.length - 1; i >= 0; i--) {\n    const /** @type {?} */ localPipeMeta = view.pipeMetas[i];\n    if (localPipeMeta.name == name) {\n      pipeMeta = localPipeMeta;\n      break;\n    }\n  }\n  if (!pipeMeta) {\n    throw new Error(\n        `Illegal state: Could not find pipe ${name} although the parser should have detected this error!`);\n  }\n  return pipeMeta;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}