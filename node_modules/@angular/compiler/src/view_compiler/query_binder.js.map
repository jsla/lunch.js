{"version":3,"file":"query_binder.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/query_binder.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAuB,cAAc,EAAC,MAAM,qBAAqB;AAKxE;;;GAGG;AACH,gCAAgC,EAAkB;IAChD,IAAM,gBAAgB,CAAC,gBAAgB,GAAqB,EAAE,CAAC;IAE/D,EAAE,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,UAAC,KAAK;QACnC,IAAM,gBAAgB,CAAC,kBAAkB,GAAG,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACpE,gBAAgB,CAAC,IAAI,OAArB,gBAAgB,EAAS,kBAAkB,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,IAAI,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,EAAhC,CAAgC,CAAC,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO;QAC7C,IAAM,gBAAgB,CAAC,QAAQ,GAAG,EAAC,KAAK,EAAE,OAAO,EAAC,CAAC;QACnD,gBAAgB,CAAC,IAAI,OAArB,gBAAgB,EACT,EAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,IAAI,cAAc,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAnC,CAAmC,CAAC,CAAC,CAAC;IACvF,CAAC,CAAC,CAAC;IAEH,gBAAgB,CAAC,OAAO,CAAC,UAAC,aAAa;QACrC,IAAI,gBAAgB,CAAC,KAAmB,CAAC;QACzC,EAAE,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YAClC,0BAA0B;YAC1B,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;QAC/D,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,wBAAwB;YACxB,IAAM,gBAAgB,CAAC,KAAK,GAAG,EAAE,CAAC,eAAe,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5E,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,KAAK,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;YAClD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,KAAK,GAAG,EAAE,CAAC,UAAU,CAAC;YACxB,CAAC;QACH,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,aAAa,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AACD;IAEA;;;OAGG;IACH,wBAAmB,KAAmB,EAAE,KAA2B;QAAhD,UAAK,GAAL,KAAK,CAAc;QAClC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC;IACvC,CAAC;IACH,qBAAC;AAAD,CAAC,AATD,IASC;AAED;IACA,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC;IAC9B,gBAAgB;IAChB,cAAc,CAAC,SAAS,CAAC,KAAK,CAAC;AAC/B,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CompileTokenMetadata, tokenReference} from '../compile_metadata';\nimport * as o from '../output/output_ast';\n\nimport {CompileElement} from './compile_element';\nimport {CompileQuery} from './compile_query';\n/**\n * @param {?} ce\n * @return {?}\n */\nexport function bindQueryValues(ce: CompileElement) {\n  const /** @type {?} */ queriesWithReads: _QueryWithRead[] = [];\n\n  ce.getProviderTokens().forEach((token) => {\n    const /** @type {?} */ queriesForProvider = ce.getQueriesFor(token);\n    queriesWithReads.push(...queriesForProvider.map(query => new _QueryWithRead(query, token)));\n  });\n\n  Object.keys(ce.referenceTokens).forEach(varName => {\n    const /** @type {?} */ varToken = {value: varName};\n    queriesWithReads.push(\n        ...ce.getQueriesFor(varToken).map(query => new _QueryWithRead(query, varToken)));\n  });\n\n  queriesWithReads.forEach((queryWithRead) => {\n    let /** @type {?} */ value: o.Expression;\n    if (queryWithRead.read.identifier) {\n      // query for an identifier\n      value = ce.instances.get(tokenReference(queryWithRead.read));\n    } else {\n      // query for a reference\n      const /** @type {?} */ token = ce.referenceTokens[queryWithRead.read.value];\n      if (token) {\n        value = ce.instances.get(tokenReference(token));\n      } else {\n        value = ce.elementRef;\n      }\n    }\n    if (value) {\n      queryWithRead.query.addValue(value, ce.view);\n    }\n  });\n}\nclass _QueryWithRead {\npublic read: CompileTokenMetadata;\n/**\n * @param {?} query\n * @param {?} match\n */\nconstructor(public query: CompileQuery, match: CompileTokenMetadata) {\n    this.read = query.meta.read || match;\n  }\n}\n\nfunction _QueryWithRead_tsickle_Closure_declarations() {\n/** @type {?} */\n_QueryWithRead.prototype.read;\n/** @type {?} */\n_QueryWithRead.prototype.query;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}