{"version":3,"file":"compile_element.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/view_compiler/compile_element.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {CompileDiDependencyMetadata, CompileDirectiveSummary, CompileIdentifierMetadata, CompileProviderMetadata, CompileQueryMetadata, CompileTokenMetadata, identifierName, tokenName, tokenReference} from '../compile_metadata';\nimport {createDiTokenExpression} from '../compiler_util/identifier_util';\nimport {DirectiveWrapperCompiler, DirectiveWrapperExpressions} from '../directive_wrapper_compiler';\nimport {isPresent} from '../facade/lang';\nimport {Identifiers, createIdentifier, createIdentifierToken, identifierToken, resolveIdentifier} from '../identifiers';\nimport * as o from '../output/output_ast';\nimport {convertValueToOutputAst} from '../output/value_util';\nimport {ProviderAst, ProviderAstType, ReferenceAst, TemplateAst} from '../template_parser/template_ast';\n\nimport {CompileMethod} from './compile_method';\nimport {CompileQuery, addQueryToTokenMap, createQueryList} from './compile_query';\nimport {CompileView, CompileViewRootNode} from './compile_view';\nimport {InjectMethodVars} from './constants';\nimport {ComponentFactoryDependency, DirectiveWrapperDependency} from './deps';\nimport {getPropertyInView, injectFromViewParentInjector} from './util';\nexport class CompileNode {\n/**\n * @param {?} parent\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} renderNode\n * @param {?} sourceAst\n */\nconstructor(\npublic parent: CompileElement,\npublic view: CompileView,\npublic nodeIndex: number,\npublic renderNode: o.Expression,\npublic sourceAst: TemplateAst) {}\n/**\n * @return {?}\n */\nisNull(): boolean { return !this.renderNode; }\n/**\n * @return {?}\n */\nisRootElement(): boolean { return this.view != this.parent.view; }\n}\n\nfunction CompileNode_tsickle_Closure_declarations() {\n/** @type {?} */\nCompileNode.prototype.parent;\n/** @type {?} */\nCompileNode.prototype.view;\n/** @type {?} */\nCompileNode.prototype.nodeIndex;\n/** @type {?} */\nCompileNode.prototype.renderNode;\n/** @type {?} */\nCompileNode.prototype.sourceAst;\n}\n\nexport class CompileElement extends CompileNode {\n/**\n * @return {?}\n */\nstatic createNull(): CompileElement {\n    return new CompileElement(null, null, null, null, null, null, [], [], false, false, []);\n  }\npublic compViewExpr: o.Expression = null;\npublic viewContainer: o.ReadPropExpr;\npublic elementRef: o.Expression;\npublic instances = new Map<any, o.Expression>();\npublic directiveWrapperInstance = new Map<any, o.Expression>();\nprivate _resolvedProviders: Map<any, ProviderAst>;\nprivate _queryCount = 0;\nprivate _queries = new Map<any, CompileQuery[]>();\npublic contentNodesByNgContentIndex: Array<CompileViewRootNode>[] = null;\npublic embeddedView: CompileView;\npublic referenceTokens: {[key: string]: CompileTokenMetadata};\n/**\n * @param {?} parent\n * @param {?} view\n * @param {?} nodeIndex\n * @param {?} renderNode\n * @param {?} sourceAst\n * @param {?} component\n * @param {?} _directives\n * @param {?} _resolvedProvidersArray\n * @param {?} hasViewContainer\n * @param {?} hasEmbeddedView\n * @param {?} references\n */\nconstructor(\n      parent: CompileElement, view: CompileView, nodeIndex: number, renderNode: o.Expression,\n      sourceAst: TemplateAst,\npublic component: CompileDirectiveSummary,\nprivate _directives: CompileDirectiveSummary[],\nprivate _resolvedProvidersArray: ProviderAst[],\npublic hasViewContainer: boolean,\npublic hasEmbeddedView: boolean, references: ReferenceAst[]) {\n    super(parent, view, nodeIndex, renderNode, sourceAst);\n    this.referenceTokens = {};\n    references.forEach(ref => this.referenceTokens[ref.name] = ref.value);\n\n    this.elementRef =\n        o.importExpr(createIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);\n    this.instances.set(resolveIdentifier(Identifiers.ElementRef), this.elementRef);\n    this.instances.set(\n        resolveIdentifier(Identifiers.Injector),\n        o.THIS_EXPR.callMethod('injector', [o.literal(this.nodeIndex)]));\n    this.instances.set(resolveIdentifier(Identifiers.Renderer), o.THIS_EXPR.prop('renderer'));\n    if (this.hasViewContainer || this.hasEmbeddedView) {\n      this._createViewContainer();\n    }\n    if (this.component) {\n      this._createComponentFactoryResolver();\n    }\n  }\n/**\n * @return {?}\n */\nprivate _createViewContainer() {\n    const /** @type {?} */ fieldName = `_vc_${this.nodeIndex}`;\n    const /** @type {?} */ parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;\n    // private is fine here as no child view will reference a ViewContainer\n    this.view.fields.push(new o.ClassField(\n        fieldName, o.importType(createIdentifier(Identifiers.ViewContainer)),\n        [o.StmtModifier.Private]));\n    const /** @type {?} */ statement =\n        o.THIS_EXPR.prop(fieldName)\n            .set(o.importExpr(createIdentifier(Identifiers.ViewContainer)).instantiate([\n              o.literal(this.nodeIndex), o.literal(parentNodeIndex), o.THIS_EXPR, this.renderNode\n            ]))\n            .toStmt();\n    this.view.createMethod.addStmt(statement);\n    this.viewContainer = o.THIS_EXPR.prop(fieldName);\n    this.instances.set(resolveIdentifier(Identifiers.ViewContainer), this.viewContainer);\n    this.view.viewContainers.push(this.viewContainer);\n  }\n/**\n * @return {?}\n */\nprivate _createComponentFactoryResolver() {\n    const /** @type {?} */ entryComponents =\n        this.component.entryComponents.map((entryComponent: CompileIdentifierMetadata) => {\n          const /** @type {?} */ id: CompileIdentifierMetadata = {reference: null};\n          this.view.targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));\n          return id;\n        });\n    if (!entryComponents || entryComponents.length === 0) {\n      return;\n    }\n    const /** @type {?} */ createComponentFactoryResolverExpr =\n        o.importExpr(createIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([\n          o.literalArr(entryComponents.map((entryComponent) => o.importExpr(entryComponent))),\n          injectFromViewParentInjector(\n              this.view, createIdentifierToken(Identifiers.ComponentFactoryResolver), false)\n        ]);\n    const /** @type {?} */ provider: CompileProviderMetadata = {\n      token: createIdentifierToken(Identifiers.ComponentFactoryResolver),\n      useValue: createComponentFactoryResolverExpr\n    };\n    // Add ComponentFactoryResolver as first provider as it does not have deps on other providers\n    // ProviderAstType.PrivateService as only the component and its view can see it,\n    // but nobody else\n    this._resolvedProvidersArray.unshift(new ProviderAst(\n        provider.token, false, true, [provider], ProviderAstType.PrivateService, [],\n        this.sourceAst.sourceSpan));\n  }\n/**\n * @param {?} compViewExpr\n * @return {?}\n */\nsetComponentView(compViewExpr: o.Expression) {\n    this.compViewExpr = compViewExpr;\n    this.contentNodesByNgContentIndex =\n        new Array(this.component.template.ngContentSelectors.length);\n    for (let /** @type {?} */ i = 0; i < this.contentNodesByNgContentIndex.length; i++) {\n      this.contentNodesByNgContentIndex[i] = [];\n    }\n  }\n/**\n * @param {?} embeddedView\n * @return {?}\n */\nsetEmbeddedView(embeddedView: CompileView) {\n    this.embeddedView = embeddedView;\n    if (isPresent(embeddedView)) {\n      const /** @type {?} */ createTemplateRefExpr =\n          o.importExpr(createIdentifier(Identifiers.TemplateRef_)).instantiate([\n            o.THIS_EXPR, o.literal(this.nodeIndex), this.renderNode\n          ]);\n      const /** @type {?} */ provider: CompileProviderMetadata = {\n        token: createIdentifierToken(Identifiers.TemplateRef),\n        useValue: createTemplateRefExpr\n      };\n      // Add TemplateRef as first provider as it does not have deps on other providers\n      this._resolvedProvidersArray.unshift(new ProviderAst(\n          provider.token, false, true, [provider], ProviderAstType.Builtin, [],\n          this.sourceAst.sourceSpan));\n    }\n  }\n/**\n * @return {?}\n */\nbeforeChildren(): void {\n    if (this.hasViewContainer) {\n      this.instances.set(\n          resolveIdentifier(Identifiers.ViewContainerRef), this.viewContainer.prop('vcRef'));\n    }\n\n    this._resolvedProviders = new Map<any, ProviderAst>();\n    this._resolvedProvidersArray.forEach(\n        provider => this._resolvedProviders.set(tokenReference(provider.token), provider));\n\n    // create all the provider instances, some in the view constructor,\n    // some as getters. We rely on the fact that they are already sorted topologically.\n    Array.from(this._resolvedProviders.values()).forEach((resolvedProvider) => {\n      const /** @type {?} */ isDirectiveWrapper = resolvedProvider.providerType === ProviderAstType.Component ||\n          resolvedProvider.providerType === ProviderAstType.Directive;\n      const /** @type {?} */ providerValueExpressions = resolvedProvider.providers.map((provider) => {\n        if (provider.useExisting) {\n          return this._getDependency(resolvedProvider.providerType, {token: provider.useExisting});\n        } else if (provider.useFactory) {\n          const /** @type {?} */ deps = provider.deps || provider.useFactory.diDeps;\n          const /** @type {?} */ depsExpr =\n              deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          return o.importExpr(provider.useFactory).callFn(depsExpr);\n        } else if (provider.useClass) {\n          const /** @type {?} */ deps = provider.deps || provider.useClass.diDeps;\n          const /** @type {?} */ depsExpr =\n              deps.map((dep) => this._getDependency(resolvedProvider.providerType, dep));\n          if (isDirectiveWrapper) {\n            const /** @type {?} */ directiveWrapperIdentifier: CompileIdentifierMetadata = {reference: null};\n            this.view.targetDependencies.push(new DirectiveWrapperDependency(\n                provider.useClass, DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass),\n                directiveWrapperIdentifier));\n            return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);\n          } else {\n            return o.importExpr(provider.useClass)\n                .instantiate(depsExpr, o.importType(provider.useClass));\n          }\n        } else {\n          return convertValueToOutputAst(provider.useValue);\n        }\n      });\n      const /** @type {?} */ propName =\n          `_${tokenName(resolvedProvider.token)}_${this.nodeIndex}_${this.instances.size}`;\n      const /** @type {?} */ instance = createProviderProperty(\n          propName, providerValueExpressions, resolvedProvider.multiProvider,\n          resolvedProvider.eager, this);\n      if (isDirectiveWrapper) {\n        this.directiveWrapperInstance.set(tokenReference(resolvedProvider.token), instance);\n        this.instances.set(\n            tokenReference(resolvedProvider.token), DirectiveWrapperExpressions.context(instance));\n      } else {\n        this.instances.set(tokenReference(resolvedProvider.token), instance);\n      }\n    });\n\n    for (let /** @type {?} */ i = 0; i < this._directives.length; i++) {\n      const /** @type {?} */ directive = this._directives[i];\n      const /** @type {?} */ directiveInstance = this.instances.get(tokenReference(identifierToken(directive.type)));\n      directive.queries.forEach((queryMeta) => { this._addQuery(queryMeta, directiveInstance); });\n    }\n\n    Object.keys(this.referenceTokens).forEach(varName => {\n      const /** @type {?} */ token = this.referenceTokens[varName];\n      let /** @type {?} */ varValue: o.Expression;\n      if (token) {\n        varValue = this.instances.get(tokenReference(token));\n      } else {\n        varValue = this.renderNode;\n      }\n      this.view.locals.set(varName, varValue);\n    });\n  }\n/**\n * @param {?} childNodeCount\n * @return {?}\n */\nafterChildren(childNodeCount: number) {\n    Array.from(this._resolvedProviders.values()).forEach((resolvedProvider) => {\n      // Note: afterChildren is called after recursing into children.\n      // This is good so that an injector match in an element that is closer to a requesting element\n      // matches first.\n      const /** @type {?} */ providerExpr = this.instances.get(tokenReference(resolvedProvider.token));\n      // Note: view providers are only visible on the injector of that element.\n      // This is not fully correct as the rules during codegen don't allow a directive\n      // to get hold of a view provdier on the same element. We still do this semantic\n      // as it simplifies our model to having only one runtime injector per element.\n      const /** @type {?} */ providerChildNodeCount =\n          resolvedProvider.providerType === ProviderAstType.PrivateService ? 0 : childNodeCount;\n      this.view.injectorGetMethod.addStmt(createInjectInternalCondition(\n          this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));\n    });\n  }\n/**\n * @return {?}\n */\nfinish() {\n    Array.from(this._queries.values())\n        .forEach(\n            queries => queries.forEach(\n                q => q.generateStatements(\n                    this.view.createMethod, this.view.updateContentQueriesMethod)));\n  }\n/**\n * @param {?} ngContentIndex\n * @param {?} nodeExpr\n * @return {?}\n */\naddContentNode(ngContentIndex: number, nodeExpr: CompileViewRootNode) {\n    this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);\n  }\n/**\n * @return {?}\n */\ngetComponent(): o.Expression {\n    return isPresent(this.component) ?\n        this.instances.get(tokenReference(identifierToken(this.component.type))) :\n        null;\n  }\n/**\n * @return {?}\n */\ngetProviderTokens(): CompileTokenMetadata[] {\n    return Array.from(this._resolvedProviders.values()).map(provider => provider.token);\n  }\n/**\n * @param {?} token\n * @return {?}\n */\ngetQueriesFor(token: CompileTokenMetadata): CompileQuery[] {\n    const /** @type {?} */ result: CompileQuery[] = [];\n    let /** @type {?} */ currentEl: CompileElement = this;\n    let /** @type {?} */ distance = 0;\n    let /** @type {?} */ queries: CompileQuery[];\n    while (!currentEl.isNull()) {\n      queries = currentEl._queries.get(tokenReference(token));\n      if (isPresent(queries)) {\n        result.push(...queries.filter((query) => query.meta.descendants || distance <= 1));\n      }\n      if (currentEl._directives.length > 0) {\n        distance++;\n      }\n      currentEl = currentEl.parent;\n    }\n    queries = this.view.componentView.viewQueries.get(tokenReference(token));\n    if (isPresent(queries)) {\n      result.push(...queries);\n    }\n    return result;\n  }\n/**\n * @param {?} queryMeta\n * @param {?} directiveInstance\n * @return {?}\n */\nprivate _addQuery(queryMeta: CompileQueryMetadata, directiveInstance: o.Expression):\n      CompileQuery {\n    const /** @type {?} */ propName =\n        `_query_${tokenName(queryMeta.selectors[0])}_${this.nodeIndex}_${this._queryCount++}`;\n    const /** @type {?} */ queryList = createQueryList(propName, this.view);\n    const /** @type {?} */ query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);\n    addQueryToTokenMap(this._queries, query);\n    return query;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @return {?}\n */\nprivate _getLocalDependency(\n      requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata): o.Expression {\n    let /** @type {?} */ result: o.Expression = null;\n    if (isPresent(dep.token)) {\n      // access builtins with special visibility\n      if (!result) {\n        if (tokenReference(dep.token) === resolveIdentifier(Identifiers.ChangeDetectorRef)) {\n          if (requestingProviderType === ProviderAstType.Component) {\n            return this.compViewExpr.prop('ref');\n          } else {\n            return getPropertyInView(o.THIS_EXPR.prop('ref'), this.view, this.view.componentView);\n          }\n        }\n      }\n      // access regular providers on the element\n      if (!result) {\n        const /** @type {?} */ resolvedProvider = this._resolvedProviders.get(tokenReference(dep.token));\n        // don't allow directives / public services to access private services.\n        // only components and private services can access private services.\n        if (resolvedProvider && (requestingProviderType === ProviderAstType.Directive ||\n                                 requestingProviderType === ProviderAstType.PublicService) &&\n            resolvedProvider.providerType === ProviderAstType.PrivateService) {\n          return null;\n        }\n        result = this.instances.get(tokenReference(dep.token));\n      }\n    }\n    return result;\n  }\n/**\n * @param {?} requestingProviderType\n * @param {?} dep\n * @return {?}\n */\nprivate _getDependency(requestingProviderType: ProviderAstType, dep: CompileDiDependencyMetadata):\n      o.Expression {\n    let /** @type {?} */ currElement: CompileElement = this;\n    let /** @type {?} */ result: o.Expression = null;\n    if (dep.isValue) {\n      result = o.literal(dep.value);\n    }\n    if (!result && !dep.isSkipSelf) {\n      result = this._getLocalDependency(requestingProviderType, dep);\n    }\n    // check parent elements\n    while (!result && !currElement.parent.isNull()) {\n      currElement = currElement.parent;\n      result = currElement._getLocalDependency(ProviderAstType.PublicService, {token: dep.token});\n    }\n\n    if (!result) {\n      result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);\n    }\n    if (!result) {\n      result = o.NULL_EXPR;\n    }\n    return getPropertyInView(result, this.view, currElement.view);\n  }\n}\n\nfunction CompileElement_tsickle_Closure_declarations() {\n/** @type {?} */\nCompileElement.prototype.compViewExpr;\n/** @type {?} */\nCompileElement.prototype.viewContainer;\n/** @type {?} */\nCompileElement.prototype.elementRef;\n/** @type {?} */\nCompileElement.prototype.instances;\n/** @type {?} */\nCompileElement.prototype.directiveWrapperInstance;\n/** @type {?} */\nCompileElement.prototype._resolvedProviders;\n/** @type {?} */\nCompileElement.prototype._queryCount;\n/** @type {?} */\nCompileElement.prototype._queries;\n/** @type {?} */\nCompileElement.prototype.contentNodesByNgContentIndex;\n/** @type {?} */\nCompileElement.prototype.embeddedView;\n/** @type {?} */\nCompileElement.prototype.referenceTokens;\n/** @type {?} */\nCompileElement.prototype.component;\n/** @type {?} */\nCompileElement.prototype._directives;\n/** @type {?} */\nCompileElement.prototype._resolvedProvidersArray;\n/** @type {?} */\nCompileElement.prototype.hasViewContainer;\n/** @type {?} */\nCompileElement.prototype.hasEmbeddedView;\n}\n\n/**\n * @param {?} nodeIndex\n * @param {?} childNodeCount\n * @param {?} provider\n * @param {?} providerExpr\n * @return {?}\n */\nfunction createInjectInternalCondition(\n    nodeIndex: number, childNodeCount: number, provider: ProviderAst,\n    providerExpr: o.Expression): o.Statement {\n  let /** @type {?} */ indexCondition: o.Expression;\n  if (childNodeCount > 0) {\n    indexCondition = o.literal(nodeIndex)\n                         .lowerEquals(InjectMethodVars.requestNodeIndex)\n                         .and(InjectMethodVars.requestNodeIndex.lowerEquals(\n                             o.literal(nodeIndex + childNodeCount)));\n  } else {\n    indexCondition = o.literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);\n  }\n  return new o.IfStmt(\n      InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition),\n      [new o.ReturnStatement(providerExpr)]);\n}\n/**\n * @param {?} propName\n * @param {?} providerValueExpressions\n * @param {?} isMulti\n * @param {?} isEager\n * @param {?} compileElement\n * @return {?}\n */\nfunction createProviderProperty(\n    propName: string, providerValueExpressions: o.Expression[], isMulti: boolean, isEager: boolean,\n    compileElement: CompileElement): o.Expression {\n  const /** @type {?} */ view = compileElement.view;\n  let /** @type {?} */ resolvedProviderValueExpr: o.Expression;\n  let /** @type {?} */ type: o.Type;\n  if (isMulti) {\n    resolvedProviderValueExpr = o.literalArr(providerValueExpressions);\n    type = new o.ArrayType(o.DYNAMIC_TYPE);\n  } else {\n    resolvedProviderValueExpr = providerValueExpressions[0];\n    type = providerValueExpressions[0].type;\n  }\n  if (!type) {\n    type = o.DYNAMIC_TYPE;\n  }\n  if (isEager) {\n    view.fields.push(new o.ClassField(propName, type));\n    view.createMethod.addStmt(o.THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());\n  } else {\n    const /** @type {?} */ internalField = `_${propName}`;\n    view.fields.push(new o.ClassField(internalField, type));\n    const /** @type {?} */ getter = new CompileMethod(view);\n    getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);\n    // Note: Equals is important for JS so that it also checks the undefined case!\n    getter.addStmt(new o.IfStmt(\n        o.THIS_EXPR.prop(internalField).isBlank(),\n        [o.THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));\n    getter.addStmt(new o.ReturnStatement(o.THIS_EXPR.prop(internalField)));\n    view.getters.push(new o.ClassGetter(propName, getter.finish(), type));\n  }\n  return o.THIS_EXPR.prop(propName);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}