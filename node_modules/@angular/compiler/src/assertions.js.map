{"version":3,"file":"assertions.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/assertions.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,SAAS,EAAC,MAAM,eAAe;OAEhC,EAAC,OAAO,EAAE,SAAS,EAAC,MAAM,oBAAoB;AACrD;;;;GAIG;AACH,qCAAqC,UAAkB,EAAE,KAAU;IACjE,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC;IACT,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,IAAI,KAAK,CAAC,eAAa,UAAU,iCAA8B,CAAC,CAAC;IACzE,CAAC;IACD,GAAG,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC;QAC1D,EAAE,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC;YACjC,MAAM,IAAI,KAAK,CAAC,eAAa,UAAU,iCAA8B,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;AACH,CAAC;AAED,IAAM,gBAAgB,CAAC,+BAA+B,GAAG;IACvD,OAAO;IACP,MAAM;IACN,QAAQ;IACR,aAAa;IACb,OAAO;CACR,CAAC;AACF;;;;GAIG;AACH,2CAA2C,UAAkB,EAAE,KAAU;IACvE,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,MAAM,IAAI,KAAK,CAAC,eAAa,UAAU,oCAAiC,CAAC,CAAC;IAC5E,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1C,IAAM,gBAAgB,CAAC,OAAK,GAAmB,CAAG,KAAK,CAAC,CAAC,CAAY,CAAC,CAAC;QACvE,IAAM,gBAAgB,CAAC,KAAG,GAAmB,CAAG,KAAK,CAAC,CAAC,CAAY,CAAC,CAAC;QACrE,sBAAsB;QACtB,+BAA+B,CAAC,OAAO,CAAC,UAAA,MAAM;YAC5C,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAK,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAG,CAAC,CAAC,CAAC,CAAC;gBAC3C,MAAM,IAAI,KAAK,CAAC,OAAK,OAAK,YAAO,KAAG,+CAA4C,CAAC,CAAC;YACpF,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isDevMode} from '@angular/core';\n\nimport {isBlank, isPresent} from '../src/facade/lang';\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertArrayOfStrings(identifier: string, value: any) {\n  if (!isDevMode() || isBlank(value)) {\n    return;\n  }\n  if (!Array.isArray(value)) {\n    throw new Error(`Expected '${identifier}' to be an array of strings.`);\n  }\n  for (let /** @type {?} */ i = 0; i < value.length; i += 1) {\n    if (typeof value[i] !== 'string') {\n      throw new Error(`Expected '${identifier}' to be an array of strings.`);\n    }\n  }\n}\n\nconst /** @type {?} */ INTERPOLATION_BLACKLIST_REGEXPS = [\n  /^\\s*$/,        // empty\n  /[<>]/,         // html tag\n  /^[{}]$/,       // i18n expansion\n  /&(#|[a-z])/i,  // character reference,\n  /^\\/\\//,        // comment\n];\n/**\n * @param {?} identifier\n * @param {?} value\n * @return {?}\n */\nexport function assertInterpolationSymbols(identifier: string, value: any): void {\n  if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {\n    throw new Error(`Expected '${identifier}' to be an array, [start, end].`);\n  } else if (isDevMode() && !isBlank(value)) {\n    const /** @type {?} */ start = /** @type {?} */(( value[0] as string));\n    const /** @type {?} */ end = /** @type {?} */(( value[1] as string));\n    // black list checking\n    INTERPOLATION_BLACKLIST_REGEXPS.forEach(regexp => {\n      if (regexp.test(start) || regexp.test(end)) {\n        throw new Error(`['${start}', '${end}'] contains unusable interpolation symbol.`);\n      }\n    });\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}