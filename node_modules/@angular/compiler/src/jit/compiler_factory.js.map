{"version":3,"file":"compiler_factory.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/jit/compiler_factory.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {COMPILER_OPTIONS, Compiler, CompilerFactory, CompilerOptions, Inject, OpaqueToken, Optional, PLATFORM_INITIALIZER, PlatformRef, Provider, ReflectiveInjector, TRANSLATIONS, TRANSLATIONS_FORMAT, Type, ViewEncapsulation, createPlatformFactory, isDevMode, platformCore} from '@angular/core';\n\nimport {AnimationParser} from '../animation/animation_parser';\nimport {CompilerConfig} from '../config';\nimport {DirectiveNormalizer} from '../directive_normalizer';\nimport {DirectiveResolver} from '../directive_resolver';\nimport {DirectiveWrapperCompiler} from '../directive_wrapper_compiler';\nimport {Lexer} from '../expression_parser/lexer';\nimport {Parser} from '../expression_parser/parser';\nimport * as i18n from '../i18n/index';\nimport {CompilerInjectable} from '../injectable';\nimport {CompileMetadataResolver} from '../metadata_resolver';\nimport {HtmlParser} from '../ml_parser/html_parser';\nimport {NgModuleCompiler} from '../ng_module_compiler';\nimport {NgModuleResolver} from '../ng_module_resolver';\nimport {PipeResolver} from '../pipe_resolver';\nimport {Console, ReflectionCapabilities, Reflector, ReflectorReader, reflector} from '../private_import_core';\nimport {ResourceLoader} from '../resource_loader';\nimport {DomElementSchemaRegistry} from '../schema/dom_element_schema_registry';\nimport {ElementSchemaRegistry} from '../schema/element_schema_registry';\nimport {StyleCompiler} from '../style_compiler';\nimport {SummaryResolver} from '../summary_resolver';\nimport {TemplateParser} from '../template_parser/template_parser';\nimport {DEFAULT_PACKAGE_URL_PROVIDER, UrlResolver} from '../url_resolver';\nimport {ViewCompiler} from '../view_compiler/view_compiler';\n\nimport {JitCompiler} from './compiler';\n\nconst /** @type {?} */ _NO_RESOURCE_LOADER: ResourceLoader = {\n/**\n * @param {?} url\n * @return {?}\n */\nget(url: string): Promise<string>{\n      throw new Error(\n          `No ResourceLoader implementation has been provided. Can't read the url \"${url}\"`);}\n};\n\nconst /** @type {?} */ baseHtmlParser = new OpaqueToken('HtmlParser');\n\n/**\n * A set of providers that provide `JitCompiler` and its dependencies to use for\n * template compilation.\n */\nexport const /** @type {?} */ COMPILER_PROVIDERS: Array<any|Type<any>|{[k: string]: any}|any[]> = [\n  {provide: Reflector, useValue: reflector},\n  {provide: ReflectorReader, useExisting: Reflector},\n  {provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER},\n  SummaryResolver,\n  Console,\n  Lexer,\n  Parser,\n  {\n    provide: baseHtmlParser,\n    useClass: HtmlParser,\n  },\n  {\n    provide: i18n.I18NHtmlParser,\n    useFactory: (parser: HtmlParser, translations: string, format: string) =>\n                    new i18n.I18NHtmlParser(parser, translations, format),\n    deps: [\n      baseHtmlParser,\n      [new Optional(), new Inject(TRANSLATIONS)],\n      [new Optional(), new Inject(TRANSLATIONS_FORMAT)],\n    ]\n  },\n  {\n    provide: HtmlParser,\n    useExisting: i18n.I18NHtmlParser,\n  },\n  TemplateParser,\n  DirectiveNormalizer,\n  CompileMetadataResolver,\n  DEFAULT_PACKAGE_URL_PROVIDER,\n  StyleCompiler,\n  ViewCompiler,\n  NgModuleCompiler,\n  DirectiveWrapperCompiler,\n  {provide: CompilerConfig, useValue: new CompilerConfig()},\n  JitCompiler,\n  {provide: Compiler, useExisting: JitCompiler},\n  DomElementSchemaRegistry,\n  {provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry},\n  UrlResolver,\n  DirectiveResolver,\n  PipeResolver,\n  NgModuleResolver,\n  AnimationParser\n];\n@CompilerInjectable()\nexport class JitCompilerFactory implements CompilerFactory {\nprivate _defaultOptions: CompilerOptions[];\n/**\n * @param {?} defaultOptions\n */\nconstructor( defaultOptions: CompilerOptions[]) {\n    this._defaultOptions = [<CompilerOptions>{\n                             useDebug: isDevMode(),\n                             useJit: true,\n                             defaultEncapsulation: ViewEncapsulation.Emulated\n                           }].concat(defaultOptions);\n  }\n/**\n * @param {?=} options\n * @return {?}\n */\ncreateCompiler(options: CompilerOptions[] = []): Compiler {\n    const /** @type {?} */ mergedOptions = _mergeOptions(this._defaultOptions.concat(options));\n    const /** @type {?} */ injector = ReflectiveInjector.resolveAndCreate([\n      COMPILER_PROVIDERS, {\n        provide: CompilerConfig,\n        useFactory: () => {\n          return new CompilerConfig({\n            // let explicit values from the compiler options overwrite options\n            // from the app providers. E.g. important for the testing platform.\n            genDebugInfo: mergedOptions.useDebug,\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            useJit: mergedOptions.useJit,\n            // let explicit values from the compiler options overwrite options\n            // from the app providers\n            defaultEncapsulation: mergedOptions.defaultEncapsulation,\n            logBindingUpdate: mergedOptions.useDebug\n          });\n        },\n        deps: []\n      },\n      mergedOptions.providers\n    ]);\n    return injector.get(Compiler);\n  }\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [COMPILER_OPTIONS, ] }, ]},\n];\n}\n\nfunction JitCompilerFactory_tsickle_Closure_declarations() {\n/**\n * @nocollapse\n * @type {?}\n */\nJitCompilerFactory.ctorParameters;\n/** @type {?} */\nJitCompilerFactory.prototype._defaultOptions;\n}\n\n/**\n * @return {?}\n */\nfunction _initReflector() {\n  reflector.reflectionCapabilities = new ReflectionCapabilities();\n}\n\n/**\n * A platform that included corePlatform and the compiler.\n *\n * @experimental\n */\nexport const /** @type {?} */ platformCoreDynamic = createPlatformFactory(platformCore, 'coreDynamic', [\n  {provide: COMPILER_OPTIONS, useValue: {}, multi: true},\n  {provide: CompilerFactory, useClass: JitCompilerFactory},\n  {provide: PLATFORM_INITIALIZER, useValue: _initReflector, multi: true},\n]);\n/**\n * @param {?} optionsArr\n * @return {?}\n */\nfunction _mergeOptions(optionsArr: CompilerOptions[]): CompilerOptions {\n  return {\n    useDebug: _lastDefined(optionsArr.map(options => options.useDebug)),\n    useJit: _lastDefined(optionsArr.map(options => options.useJit)),\n    defaultEncapsulation: _lastDefined(optionsArr.map(options => options.defaultEncapsulation)),\n    providers: _mergeArrays(optionsArr.map(options => options.providers))\n  };\n}\n/**\n * @param {?} args\n * @return {?}\n */\nfunction _lastDefined<T>(args: T[]): T {\n  for (let /** @type {?} */ i = args.length - 1; i >= 0; i--) {\n    if (args[i] !== undefined) {\n      return args[i];\n    }\n  }\n  return undefined;\n}\n/**\n * @param {?} parts\n * @return {?}\n */\nfunction _mergeArrays(parts: any[][]): any[] {\n  const /** @type {?} */ result: any[] = [];\n  parts.forEach((part) => part && result.push(...part));\n  return result;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}