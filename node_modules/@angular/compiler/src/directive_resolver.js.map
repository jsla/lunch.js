{"version":3,"file":"directive_resolver.js","sourceRoot":"","sources":["../../../../modules/@angular/compiler/src/directive_resolver.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;;;;;;;;;;OAEI,EAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAQ,iBAAiB,EAAC,MAAM,eAAe;OAErH,EAAC,WAAW,EAAE,gBAAgB,EAAC,MAAM,qBAAqB;OAC1D,EAAC,SAAS,EAAC,MAAM,eAAe;OAChC,EAAC,kBAAkB,EAAC,MAAM,cAAc;OACxC,EAAC,eAAe,EAAE,SAAS,EAAC,MAAM,uBAAuB;OACzD,EAAC,YAAY,EAAC,MAAM,QAAQ;AAEnC;IACA;;OAEG;IACH,2BAAoB,UAAuC;QAA/C,0BAA+C,GAA/C,sBAA+C;QAAvC,eAAU,GAAV,UAAU,CAA6B;IAAG,CAAC;IAC/D;;;OAGG;IACH,uCAAW,GAAX,UAAY,IAAe;QACvB,IAAM,gBAAgB,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,MAAM,CAAC,YAAY,IAAI,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAChE,CAAC;IACH;;;;;OAKG;IACH,mCAAO,GAAP,UAAQ,IAAe,EAAE,eAAsB;QAAtB,+BAAsB,GAAtB,sBAAsB;QAC3C,IAAM,gBAAgB,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YACjB,IAAM,gBAAgB,CAAC,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;YAC1F,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,IAAM,gBAAgB,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBAC7E,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAC3E,CAAC;QACH,CAAC;QAED,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACpB,MAAM,IAAI,KAAK,CAAC,sCAAoC,SAAS,CAAC,IAAI,CAAG,CAAC,CAAC;QACzE,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IACH;;;;;OAKG;IACK,sDAA0B,GAAlC,UACM,EAAa,EAAE,gBAAwC,EACvD,aAAwB;QAC1B,IAAM,gBAAgB,CAAC,MAAM,GAAa,EAAE,CAAC;QAC7C,IAAM,gBAAgB,CAAC,OAAO,GAAa,EAAE,CAAC;QAC9C,IAAM,gBAAgB,CAAC,IAAI,GAA4B,EAAE,CAAC;QAC1D,IAAM,gBAAgB,CAAC,OAAO,GAAyB,EAAE,CAAC;QAE1D,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,UAAC,QAAgB;YACrD,IAAM,gBAAgB,CAAC,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,YAAY,KAAK,EAAlB,CAAkB,CAAC,CAAC;YAC3G,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,EAAE,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,CAAC;oBAC9B,MAAM,CAAC,IAAI,CAAI,QAAQ,UAAK,KAAK,CAAC,mBAAqB,CAAC,CAAC;gBAC3D,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACxB,CAAC;YACH,CAAC;YACD,IAAM,gBAAgB,CAAC,MAAM,GAAG,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,YAAY,MAAM,EAAnB,CAAmB,CAAC,CAAC;YAC7G,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBACX,EAAE,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC;oBAC/B,OAAO,CAAC,IAAI,CAAI,QAAQ,UAAK,MAAM,CAAC,mBAAqB,CAAC,CAAC;gBAC7D,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzB,CAAC;YACH,CAAC;YACD,IAAM,gBAAgB,CAAC,YAAY,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,CAAC,YAAY,WAAW,EAA7B,CAA6B,CAAC,CAAC;YAC5G,YAAY,CAAC,OAAO,CAAC,UAAA,WAAW;gBAC9B,EAAE,CAAC,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;oBACjC,IAAM,gBAAgB,CAAC,SAAS,GAAG,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;oBACnE,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;wBACtB,MAAM,IAAI,KAAK,CAAC,iEAAiE,CAAC,CAAC;oBACrF,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,CAAC,CAAC;wBAC7B,MAAM,IAAI,KAAK,CACX,qFAAqF,CAAC,CAAC;oBAC7F,CAAC;oBACD,IAAI,CAAC,OAAI,WAAW,CAAC,gBAAgB,OAAG,CAAC,GAAG,QAAQ,CAAC;gBACvD,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACN,IAAI,CAAC,OAAI,QAAQ,OAAG,CAAC,GAAG,QAAQ,CAAC;gBACnC,CAAC;YACH,CAAC,CAAC,CAAC;YACH,IAAM,gBAAgB,CAAC,aAAa,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,CAAC,YAAY,YAAY,EAA9B,CAA8B,CAAC,CAAC;YAC9G,aAAa,CAAC,OAAO,CAAC,UAAA,YAAY;gBAChC,IAAM,gBAAgB,CAAC,IAAI,GAAG,YAAY,CAAC,IAAI,IAAI,EAAE,CAAC;gBACtD,IAAI,CAAC,OAAI,YAAY,CAAC,SAAS,OAAG,CAAC,GAAM,QAAQ,SAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAG,CAAC;YACzE,CAAC,CAAC,CAAC;YACH,IAAM,gBAAgB,CAAC,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,EAAE,UAAC,CAAC,IAAK,OAAA,CAAC,YAAY,KAAK,EAAlB,CAAkB,CAAC,CAAC;YAC3G,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACV,OAAO,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;YAC5B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,aAAa,CAAC,CAAC;IACxE,CAAC;IACH;;;OAGG;IACK,8CAAkB,GAA1B,UAA2B,GAAW,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;IAC5F;;;OAGG;IACK,2CAAe,GAAvB,UAAwB,QAAkB;QACtC,IAAM,gBAAgB,CAAC,KAAK,GAAG,IAAI,GAAG,EAAU,CAAC;QACjD,IAAM,gBAAgB,CAAC,cAAc,GAAa,EAAE,CAAC;QACrD,wEAAwE;QACxE,GAAG,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC/D,IAAM,gBAAgB,CAAC,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC7C,IAAM,gBAAgB,CAAC,MAAI,GAAG,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;YAC/D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,MAAI,CAAC,CAAC,CAAC,CAAC;gBACrB,KAAK,CAAC,GAAG,CAAC,MAAI,CAAC,CAAC;gBAChB,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC/B,CAAC;QACH,CAAC;QACD,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,CAAC;IAClC,CAAC;IACH;;;;;;;;OAQG;IACK,kCAAM,GAAd,UACM,SAAoB,EAAE,MAAgB,EAAE,OAAiB,EAAE,IAA6B,EACxF,OAA6B,EAAE,aAAwB;QACzD,IAAM,gBAAgB,CAAC,YAAY,GAC/B,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC;QACtF,IAAM,gBAAgB,CAAC,aAAa,GAChC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;QAC1F,IAAM,gBAAgB,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC;QACzG,IAAM,gBAAgB,CAAC,aAAa,GAChC,SAAS,CAAC,OAAO,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,OAAO,CAAC;QAErF,EAAE,CAAC,CAAC,SAAS,YAAY,SAAS,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,IAAI,SAAS,CAAC;gBACnB,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,MAAM,EAAE,YAAY;gBACpB,OAAO,EAAE,aAAa;gBACtB,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,OAAO,EAAE,aAAa;gBACtB,eAAe,EAAE,SAAS,CAAC,eAAe;gBAC1C,SAAS,EAAE,SAAS,CAAC,SAAS;gBAC9B,aAAa,EAAE,SAAS,CAAC,aAAa;gBACtC,eAAe,EAAE,SAAS,CAAC,eAAe;gBAC1C,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,WAAW,EAAE,SAAS,CAAC,WAAW;gBAClC,MAAM,EAAE,SAAS,CAAC,MAAM;gBACxB,SAAS,EAAE,SAAS,CAAC,SAAS;gBAC9B,aAAa,EAAE,SAAS,CAAC,aAAa;gBACtC,UAAU,EAAE,SAAS,CAAC,UAAU;gBAChC,aAAa,EAAE,SAAS,CAAC,aAAa;aACvC,CAAC,CAAC;QACL,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,SAAS,CAAC;gBACnB,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,MAAM,EAAE,YAAY;gBACpB,OAAO,EAAE,aAAa;gBACtB,IAAI,EAAE,UAAU;gBAChB,QAAQ,EAAE,SAAS,CAAC,QAAQ;gBAC5B,OAAO,EAAE,aAAa;gBACtB,SAAS,EAAE,SAAS,CAAC,SAAS;aAC/B,CAAC,CAAC;QACL,CAAC;IACH,CAAC;IAzKH;QAAC,kBAAkB,EAAE;;yBAAA;IA0KrB,wBAAC;AAAD,CAAC,AAzKD,IAyKC;AAED;IACA,gBAAgB;IAChB,iBAAiB,CAAC,SAAS,CAAC,UAAU,CAAC;AACvC,CAAC;AAED;;;GAGG;AACH,6BAA6B,IAAS;IACpC,MAAM,CAAC,IAAI,YAAY,SAAS,CAAC;AACnC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, Directive, HostBinding, HostListener, Input, Output, Query, Type, resolveForwardRef} from '@angular/core';\n\nimport {ListWrapper, StringMapWrapper} from './facade/collection';\nimport {stringify} from './facade/lang';\nimport {CompilerInjectable} from './injectable';\nimport {ReflectorReader, reflector} from './private_import_core';\nimport {splitAtColon} from './util';\n@CompilerInjectable()\nexport class DirectiveResolver {\n/**\n * @param {?=} _reflector\n */\nconstructor(private _reflector: ReflectorReader = reflector) {}\n/**\n * @param {?} type\n * @return {?}\n */\nisDirective(type: Type<any>) {\n    const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    return typeMetadata && typeMetadata.some(isDirectiveMetadata);\n  }\n/**\n * Return {\\@link Directive} for a given `Type`.\n * @param {?} type\n * @param {?=} throwIfNotFound\n * @return {?}\n */\nresolve(type: Type<any>, throwIfNotFound = true): Directive {\n    const /** @type {?} */ typeMetadata = this._reflector.annotations(resolveForwardRef(type));\n    if (typeMetadata) {\n      const /** @type {?} */ metadata = ListWrapper.findLast(typeMetadata, isDirectiveMetadata);\n      if (metadata) {\n        const /** @type {?} */ propertyMetadata = this._reflector.propMetadata(type);\n        return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);\n      }\n    }\n\n    if (throwIfNotFound) {\n      throw new Error(`No Directive annotation found on ${stringify(type)}`);\n    }\n\n    return null;\n  }\n/**\n * @param {?} dm\n * @param {?} propertyMetadata\n * @param {?} directiveType\n * @return {?}\n */\nprivate _mergeWithPropertyMetadata(\n      dm: Directive, propertyMetadata: {[key: string]: any[]},\n      directiveType: Type<any>): Directive {\n    const /** @type {?} */ inputs: string[] = [];\n    const /** @type {?} */ outputs: string[] = [];\n    const /** @type {?} */ host: {[key: string]: string} = {};\n    const /** @type {?} */ queries: {[key: string]: any} = {};\n\n    Object.keys(propertyMetadata).forEach((propName: string) => {\n      const /** @type {?} */ input = ListWrapper.findLast(propertyMetadata[propName], (a) => a instanceof Input);\n      if (input) {\n        if (input.bindingPropertyName) {\n          inputs.push(`${propName}: ${input.bindingPropertyName}`);\n        } else {\n          inputs.push(propName);\n        }\n      }\n      const /** @type {?} */ output = ListWrapper.findLast(propertyMetadata[propName], (a) => a instanceof Output);\n      if (output) {\n        if (output.bindingPropertyName) {\n          outputs.push(`${propName}: ${output.bindingPropertyName}`);\n        } else {\n          outputs.push(propName);\n        }\n      }\n      const /** @type {?} */ hostBindings = propertyMetadata[propName].filter(a => a && a instanceof HostBinding);\n      hostBindings.forEach(hostBinding => {\n        if (hostBinding.hostPropertyName) {\n          const /** @type {?} */ startWith = hostBinding.hostPropertyName[0];\n          if (startWith === '(') {\n            throw new Error(`@HostBinding can not bind to events. Use @HostListener instead.`);\n          } else if (startWith === '[') {\n            throw new Error(\n                `@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.`);\n          }\n          host[`[${hostBinding.hostPropertyName}]`] = propName;\n        } else {\n          host[`[${propName}]`] = propName;\n        }\n      });\n      const /** @type {?} */ hostListeners = propertyMetadata[propName].filter(a => a && a instanceof HostListener);\n      hostListeners.forEach(hostListener => {\n        const /** @type {?} */ args = hostListener.args || [];\n        host[`(${hostListener.eventName})`] = `${propName}(${args.join(',')})`;\n      });\n      const /** @type {?} */ query = ListWrapper.findLast(propertyMetadata[propName], (a) => a instanceof Query);\n      if (query) {\n        queries[propName] = query;\n      }\n    });\n    return this._merge(dm, inputs, outputs, host, queries, directiveType);\n  }\n/**\n * @param {?} def\n * @return {?}\n */\nprivate _extractPublicName(def: string) { return splitAtColon(def, [null, def])[1].trim(); }\n/**\n * @param {?} bindings\n * @return {?}\n */\nprivate _dedupeBindings(bindings: string[]): string[] {\n    const /** @type {?} */ names = new Set<string>();\n    const /** @type {?} */ reversedResult: string[] = [];\n    // go last to first to allow later entries to overwrite previous entries\n    for (let /** @type {?} */ i = bindings.length - 1; i >= 0; i--) {\n      const /** @type {?} */ binding = bindings[i];\n      const /** @type {?} */ name = this._extractPublicName(binding);\n      if (!names.has(name)) {\n        names.add(name);\n        reversedResult.push(binding);\n      }\n    }\n    return reversedResult.reverse();\n  }\n/**\n * @param {?} directive\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} host\n * @param {?} queries\n * @param {?} directiveType\n * @return {?}\n */\nprivate _merge(\n      directive: Directive, inputs: string[], outputs: string[], host: {[key: string]: string},\n      queries: {[key: string]: any}, directiveType: Type<any>): Directive {\n    const /** @type {?} */ mergedInputs =\n        this._dedupeBindings(directive.inputs ? directive.inputs.concat(inputs) : inputs);\n    const /** @type {?} */ mergedOutputs =\n        this._dedupeBindings(directive.outputs ? directive.outputs.concat(outputs) : outputs);\n    const /** @type {?} */ mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;\n    const /** @type {?} */ mergedQueries =\n        directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;\n\n    if (directive instanceof Component) {\n      return new Component({\n        selector: directive.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: directive.exportAs,\n        moduleId: directive.moduleId,\n        queries: mergedQueries,\n        changeDetection: directive.changeDetection,\n        providers: directive.providers,\n        viewProviders: directive.viewProviders,\n        entryComponents: directive.entryComponents,\n        template: directive.template,\n        templateUrl: directive.templateUrl,\n        styles: directive.styles,\n        styleUrls: directive.styleUrls,\n        encapsulation: directive.encapsulation,\n        animations: directive.animations,\n        interpolation: directive.interpolation\n      });\n    } else {\n      return new Directive({\n        selector: directive.selector,\n        inputs: mergedInputs,\n        outputs: mergedOutputs,\n        host: mergedHost,\n        exportAs: directive.exportAs,\n        queries: mergedQueries,\n        providers: directive.providers\n      });\n    }\n  }\n}\n\nfunction DirectiveResolver_tsickle_Closure_declarations() {\n/** @type {?} */\nDirectiveResolver.prototype._reflector;\n}\n\n/**\n * @param {?} type\n * @return {?}\n */\nfunction isDirectiveMetadata(type: any): type is Directive {\n  return type instanceof Directive;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}