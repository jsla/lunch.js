{"version":3,"file":"abstract_emitter.js","sourceRoot":"","sources":["../../../../../modules/@angular/compiler/src/output/abstract_emitter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isBlank, isPresent} from '../facade/lang';\n\nimport * as o from './output_ast';\n\nconst /** @type {?} */ _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\\\|\\n|\\r|\\$/g;\nconst /** @type {?} */ _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;\nexport const /** @type {?} */ CATCH_ERROR_VAR = o.variable('error');\nexport const /** @type {?} */ CATCH_STACK_VAR = o.variable('stack');\n/**\n * @abstract\n */\nexport abstract class OutputEmitter {\n/**\n * @abstract\n * @param {?} moduleUrl\n * @param {?} stmts\n * @param {?} exportedVars\n * @return {?}\n */\nemitStatements(moduleUrl: string, stmts: o.Statement[], exportedVars: string[]) {}\n}\nclass _EmittedLine {\n  parts: string[] = [];\n/**\n * @param {?} indent\n */\nconstructor(public indent: number) {}\n}\n\nfunction _EmittedLine_tsickle_Closure_declarations() {\n/** @type {?} */\n_EmittedLine.prototype.parts;\n/** @type {?} */\n_EmittedLine.prototype.indent;\n}\n\nexport class EmitterVisitorContext {\n/**\n * @param {?} exportedVars\n * @return {?}\n */\nstatic createRoot(exportedVars: string[]): EmitterVisitorContext {\n    return new EmitterVisitorContext(exportedVars, 0);\n  }\nprivate _lines: _EmittedLine[];\nprivate _classes: o.ClassStmt[] = [];\n/**\n * @param {?} _exportedVars\n * @param {?} _indent\n */\nconstructor(private _exportedVars: string[],\nprivate _indent: number) {\n    this._lines = [new _EmittedLine(_indent)];\n  }\n/**\n * @return {?}\n */\nprivate get _currentLine(): _EmittedLine { return this._lines[this._lines.length - 1]; }\n/**\n * @param {?} varName\n * @return {?}\n */\nisExportedVar(varName: string): boolean { return this._exportedVars.indexOf(varName) !== -1; }\n/**\n * @param {?=} lastPart\n * @return {?}\n */\nprintln(lastPart: string = ''): void { this.print(lastPart, true); }\n/**\n * @return {?}\n */\nlineIsEmpty(): boolean { return this._currentLine.parts.length === 0; }\n/**\n * @param {?} part\n * @param {?=} newLine\n * @return {?}\n */\nprint(part: string, newLine: boolean = false) {\n    if (part.length > 0) {\n      this._currentLine.parts.push(part);\n    }\n    if (newLine) {\n      this._lines.push(new _EmittedLine(this._indent));\n    }\n  }\n/**\n * @return {?}\n */\nremoveEmptyLastLine() {\n    if (this.lineIsEmpty()) {\n      this._lines.pop();\n    }\n  }\n/**\n * @return {?}\n */\nincIndent() {\n    this._indent++;\n    this._currentLine.indent = this._indent;\n  }\n/**\n * @return {?}\n */\ndecIndent() {\n    this._indent--;\n    this._currentLine.indent = this._indent;\n  }\n/**\n * @param {?} clazz\n * @return {?}\n */\npushClass(clazz: o.ClassStmt) { this._classes.push(clazz); }\n/**\n * @return {?}\n */\npopClass(): o.ClassStmt { return this._classes.pop(); }\n/**\n * @return {?}\n */\nget currentClass(): o.ClassStmt {\n    return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;\n  }\n/**\n * @return {?}\n */\ntoSource(): any {\n    let /** @type {?} */ lines = this._lines;\n    if (lines[lines.length - 1].parts.length === 0) {\n      lines = lines.slice(0, lines.length - 1);\n    }\n    return lines\n        .map((line) => {\n          if (line.parts.length > 0) {\n            return _createIndent(line.indent) + line.parts.join('');\n          } else {\n            return '';\n          }\n        })\n        .join('\\n');\n  }\n}\n\nfunction EmitterVisitorContext_tsickle_Closure_declarations() {\n/** @type {?} */\nEmitterVisitorContext.prototype._lines;\n/** @type {?} */\nEmitterVisitorContext.prototype._classes;\n/** @type {?} */\nEmitterVisitorContext.prototype._exportedVars;\n/** @type {?} */\nEmitterVisitorContext.prototype._indent;\n}\n\n/**\n * @abstract\n */\nexport abstract class AbstractEmitterVisitor implements o.StatementVisitor, o.ExpressionVisitor {\n/**\n * @param {?} _escapeDollarInStrings\n */\nconstructor(private _escapeDollarInStrings: boolean) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitExpressionStmt(stmt: o.ExpressionStatement, ctx: EmitterVisitorContext): any {\n    stmt.expr.visitExpression(this, ctx);\n    ctx.println(';');\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitReturnStmt(stmt: o.ReturnStatement, ctx: EmitterVisitorContext): any {\n    ctx.print(`return `);\n    stmt.value.visitExpression(this, ctx);\n    ctx.println(';');\n    return null;\n  }\n/**\n * @abstract\n * @param {?} ast\n * @param {?} context\n * @return {?}\n */\nvisitCastExpr(ast: o.CastExpr, context: any) {}\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareClassStmt(stmt: o.ClassStmt, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitIfStmt(stmt: o.IfStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(`if (`);\n    stmt.condition.visitExpression(this, ctx);\n    ctx.print(`) {`);\n    const /** @type {?} */ hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;\n    if (stmt.trueCase.length <= 1 && !hasElseCase) {\n      ctx.print(` `);\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.removeEmptyLastLine();\n      ctx.print(` `);\n    } else {\n      ctx.println();\n      ctx.incIndent();\n      this.visitAllStatements(stmt.trueCase, ctx);\n      ctx.decIndent();\n      if (hasElseCase) {\n        ctx.println(`} else {`);\n        ctx.incIndent();\n        this.visitAllStatements(stmt.falseCase, ctx);\n        ctx.decIndent();\n      }\n    }\n    ctx.println(`}`);\n    return null;\n  }\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitTryCatchStmt(stmt: o.TryCatchStmt, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitThrowStmt(stmt: o.ThrowStmt, ctx: EmitterVisitorContext): any {\n    ctx.print(`throw `);\n    stmt.error.visitExpression(this, ctx);\n    ctx.println(`;`);\n    return null;\n  }\n/**\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitCommentStmt(stmt: o.CommentStmt, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lines = stmt.comment.split('\\n');\n    lines.forEach((line) => { ctx.println(`// ${line}`); });\n    return null;\n  }\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} ctx\n * @return {?}\n */\nvisitDeclareVarStmt(stmt: o.DeclareVarStmt, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteVarExpr(expr: o.WriteVarExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print('(');\n    }\n    ctx.print(`${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWriteKeyExpr(expr: o.WriteKeyExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print('(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(`[`);\n    expr.index.visitExpression(this, ctx);\n    ctx.print(`] = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitWritePropExpr(expr: o.WritePropExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ lineWasEmpty = ctx.lineIsEmpty();\n    if (!lineWasEmpty) {\n      ctx.print('(');\n    }\n    expr.receiver.visitExpression(this, ctx);\n    ctx.print(`.${expr.name} = `);\n    expr.value.visitExpression(this, ctx);\n    if (!lineWasEmpty) {\n      ctx.print(')');\n    }\n    return null;\n  }\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeMethodExpr(expr: o.InvokeMethodExpr, ctx: EmitterVisitorContext): any {\n    expr.receiver.visitExpression(this, ctx);\n    let /** @type {?} */ name = expr.name;\n    if (isPresent(expr.builtin)) {\n      name = this.getBuiltinMethodName(expr.builtin);\n      if (isBlank(name)) {\n        // some builtins just mean to skip the call.\n        return null;\n      }\n    }\n    ctx.print(`.${name}(`);\n    this.visitAllExpressions(expr.args, ctx, `,`);\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @abstract\n * @param {?} method\n * @return {?}\n */\ngetBuiltinMethodName(method: o.BuiltinMethod) {}\n/**\n * @param {?} expr\n * @param {?} ctx\n * @return {?}\n */\nvisitInvokeFunctionExpr(expr: o.InvokeFunctionExpr, ctx: EmitterVisitorContext): any {\n    expr.fn.visitExpression(this, ctx);\n    ctx.print(`(`);\n    this.visitAllExpressions(expr.args, ctx, ',');\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadVarExpr(ast: o.ReadVarExpr, ctx: EmitterVisitorContext): any {\n    let /** @type {?} */ varName = ast.name;\n    if (isPresent(ast.builtin)) {\n      switch (ast.builtin) {\n        case o.BuiltinVar.Super:\n          varName = 'super';\n          break;\n        case o.BuiltinVar.This:\n          varName = 'this';\n          break;\n        case o.BuiltinVar.CatchError:\n          varName = CATCH_ERROR_VAR.name;\n          break;\n        case o.BuiltinVar.CatchStack:\n          varName = CATCH_STACK_VAR.name;\n          break;\n        default:\n          throw new Error(`Unknown builtin variable ${ast.builtin}`);\n      }\n    }\n    ctx.print(varName);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitInstantiateExpr(ast: o.InstantiateExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(`new `);\n    ast.classExpr.visitExpression(this, ctx);\n    ctx.print(`(`);\n    this.visitAllExpressions(ast.args, ctx, ',');\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralExpr(ast: o.LiteralExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ value = ast.value;\n    if (typeof value === 'string') {\n      ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));\n    } else {\n      ctx.print(`${value}`);\n    }\n    return null;\n  }\n/**\n * @abstract\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitExternalExpr(ast: o.ExternalExpr, ctx: EmitterVisitorContext) {}\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitConditionalExpr(ast: o.ConditionalExpr, ctx: EmitterVisitorContext): any {\n    ctx.print(`(`);\n    ast.condition.visitExpression(this, ctx);\n    ctx.print('? ');\n    ast.trueCase.visitExpression(this, ctx);\n    ctx.print(': ');\n    ast.falseCase.visitExpression(this, ctx);\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitNotExpr(ast: o.NotExpr, ctx: EmitterVisitorContext): any {\n    ctx.print('!');\n    ast.condition.visitExpression(this, ctx);\n    return null;\n  }\n/**\n * @abstract\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitFunctionExpr(ast: o.FunctionExpr, ctx: EmitterVisitorContext) {}\n/**\n * @abstract\n * @param {?} stmt\n * @param {?} context\n * @return {?}\n */\nvisitDeclareFunctionStmt(stmt: o.DeclareFunctionStmt, context: any) {}\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitBinaryOperatorExpr(ast: o.BinaryOperatorExpr, ctx: EmitterVisitorContext): any {\n    let /** @type {?} */ opStr: string;\n    switch (ast.operator) {\n      case o.BinaryOperator.Equals:\n        opStr = '==';\n        break;\n      case o.BinaryOperator.Identical:\n        opStr = '===';\n        break;\n      case o.BinaryOperator.NotEquals:\n        opStr = '!=';\n        break;\n      case o.BinaryOperator.NotIdentical:\n        opStr = '!==';\n        break;\n      case o.BinaryOperator.And:\n        opStr = '&&';\n        break;\n      case o.BinaryOperator.Or:\n        opStr = '||';\n        break;\n      case o.BinaryOperator.Plus:\n        opStr = '+';\n        break;\n      case o.BinaryOperator.Minus:\n        opStr = '-';\n        break;\n      case o.BinaryOperator.Divide:\n        opStr = '/';\n        break;\n      case o.BinaryOperator.Multiply:\n        opStr = '*';\n        break;\n      case o.BinaryOperator.Modulo:\n        opStr = '%';\n        break;\n      case o.BinaryOperator.Lower:\n        opStr = '<';\n        break;\n      case o.BinaryOperator.LowerEquals:\n        opStr = '<=';\n        break;\n      case o.BinaryOperator.Bigger:\n        opStr = '>';\n        break;\n      case o.BinaryOperator.BiggerEquals:\n        opStr = '>=';\n        break;\n      default:\n        throw new Error(`Unknown operator ${ast.operator}`);\n    }\n    ctx.print(`(`);\n    ast.lhs.visitExpression(this, ctx);\n    ctx.print(` ${opStr} `);\n    ast.rhs.visitExpression(this, ctx);\n    ctx.print(`)`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadPropExpr(ast: o.ReadPropExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(`.`);\n    ctx.print(ast.name);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitReadKeyExpr(ast: o.ReadKeyExpr, ctx: EmitterVisitorContext): any {\n    ast.receiver.visitExpression(this, ctx);\n    ctx.print(`[`);\n    ast.index.visitExpression(this, ctx);\n    ctx.print(`]`);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralArrayExpr(ast: o.LiteralArrayExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ useNewLine = ast.entries.length > 1;\n    ctx.print(`[`, useNewLine);\n    ctx.incIndent();\n    this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);\n    ctx.decIndent();\n    ctx.print(`]`, useNewLine);\n    return null;\n  }\n/**\n * @param {?} ast\n * @param {?} ctx\n * @return {?}\n */\nvisitLiteralMapExpr(ast: o.LiteralMapExpr, ctx: EmitterVisitorContext): any {\n    const /** @type {?} */ useNewLine = ast.entries.length > 1;\n    ctx.print(`{`, useNewLine);\n    ctx.incIndent();\n    this.visitAllObjects(entry => {\n      ctx.print(`${escapeIdentifier(entry.key, this._escapeDollarInStrings, entry.quoted)}: `);\n      entry.value.visitExpression(this, ctx);\n    }, ast.entries, ctx, ',', useNewLine);\n    ctx.decIndent();\n    ctx.print(`}`, useNewLine);\n    return null;\n  }\n/**\n * @param {?} expressions\n * @param {?} ctx\n * @param {?} separator\n * @param {?=} newLine\n * @return {?}\n */\nvisitAllExpressions(\n      expressions: o.Expression[], ctx: EmitterVisitorContext, separator: string,\n      newLine: boolean = false): void {\n    this.visitAllObjects(\n        expr => expr.visitExpression(this, ctx), expressions, ctx, separator, newLine);\n  }\n/**\n * @param {?} handler\n * @param {?} expressions\n * @param {?} ctx\n * @param {?} separator\n * @param {?=} newLine\n * @return {?}\n */\nvisitAllObjects<T>(\n      handler: (t: T) => void, expressions: T[], ctx: EmitterVisitorContext, separator: string,\n      newLine: boolean = false): void {\n    for (let /** @type {?} */ i = 0; i < expressions.length; i++) {\n      if (i > 0) {\n        ctx.print(separator, newLine);\n      }\n      handler(expressions[i]);\n    }\n    if (newLine) {\n      ctx.println();\n    }\n  }\n/**\n * @param {?} statements\n * @param {?} ctx\n * @return {?}\n */\nvisitAllStatements(statements: o.Statement[], ctx: EmitterVisitorContext): void {\n    statements.forEach((stmt) => stmt.visitStatement(this, ctx));\n  }\n}\n\nfunction AbstractEmitterVisitor_tsickle_Closure_declarations() {\n/** @type {?} */\nAbstractEmitterVisitor.prototype._escapeDollarInStrings;\n}\n\n/**\n * @param {?} input\n * @param {?} escapeDollar\n * @param {?=} alwaysQuote\n * @return {?}\n */\nexport function escapeIdentifier(\n    input: string, escapeDollar: boolean, alwaysQuote: boolean = true): any {\n  if (isBlank(input)) {\n    return null;\n  }\n  const /** @type {?} */ body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, (...match: string[]) => {\n    if (match[0] == '$') {\n      return escapeDollar ? '\\\\$' : '$';\n    } else if (match[0] == '\\n') {\n      return '\\\\n';\n    } else if (match[0] == '\\r') {\n      return '\\\\r';\n    } else {\n      return `\\\\${match[0]}`;\n    }\n  });\n  const /** @type {?} */ requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);\n  return requiresQuotes ? `'${body}'` : body;\n}\n/**\n * @param {?} count\n * @return {?}\n */\nfunction _createIndent(count: number): string {\n  let /** @type {?} */ res = '';\n  for (let /** @type {?} */ i = 0; i < count; i++) {\n    res += '  ';\n  }\n  return res;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}