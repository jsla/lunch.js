{"version":3,"file":"router_preloader.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/router_preloader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n*@license\n*Copyright Google Inc. All Rights Reserved.\n*\n*Use of this source code is governed by an MIT-style license that can be\n*found in the LICENSE file at https://angular.io/license\n*/\n\nimport {Compiler, Injectable, Injector, NgModuleFactoryLoader} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Subscription} from 'rxjs/Subscription';\nimport {from} from 'rxjs/observable/from';\nimport {of } from 'rxjs/observable/of';\nimport {_catch} from 'rxjs/operator/catch';\nimport {concatMap} from 'rxjs/operator/concatMap';\nimport {filter} from 'rxjs/operator/filter';\nimport {mergeAll} from 'rxjs/operator/mergeAll';\nimport {mergeMap} from 'rxjs/operator/mergeMap';\n\nimport {Route, Routes} from './config';\nimport {NavigationEnd, Router} from './router';\nimport {RouterConfigLoader} from './router_config_loader';\n/**\n * \\@whatItDoes Provides a preloading strategy.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class PreloadingStrategy {\n/**\n * @abstract\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>) {}\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that preloads all modules as quicky as possible.\n * \n * \\@howToUse \n * \n * ```\n * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})\n * ```\n * \n * \\@experimental\n */\nexport class PreloadAllModules implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> {\n    return _catch.call(fn(), () => of (null));\n  }\n}\n/**\n * \\@whatItDoes Provides a preloading strategy that does not preload any modules.\n * \n * \\@description \n * \n * This strategy is enabled by default.\n * \n * \\@experimental\n */\nexport class NoPreloading implements PreloadingStrategy {\n/**\n * @param {?} route\n * @param {?} fn\n * @return {?}\n */\npreload(route: Route, fn: () => Observable<any>): Observable<any> { return of (null); }\n}\n/**\n * The preloader optimistically loads all router configurations to\n * make navigations into lazily-loaded sections of the application faster.\n * \n * The preloader runs in the background. When the router bootstraps, the preloader\n * starts listening to all navigation events. After every such event, the preloader\n * will check if any configurations can be loaded lazily.\n * \n * If a route is protected by `canLoad` guards, the preloaded will not load it.\n * \n * \\@stable\n */\nexport class RouterPreloader {\nprivate loader: RouterConfigLoader;\nprivate subscription: Subscription;\n/**\n * @param {?} router\n * @param {?} moduleLoader\n * @param {?} compiler\n * @param {?} injector\n * @param {?} preloadingStrategy\n */\nconstructor(\nprivate router: Router, moduleLoader: NgModuleFactoryLoader, compiler: Compiler,\nprivate injector: Injector,\nprivate preloadingStrategy: PreloadingStrategy) {\n    this.loader = new RouterConfigLoader(moduleLoader, compiler);\n  };\n/**\n * @return {?}\n */\nsetUpPreloading(): void {\n    const /** @type {?} */ navigations = filter.call(this.router.events, (e: any) => e instanceof NavigationEnd);\n    this.subscription = concatMap.call(navigations, () => this.preload()).subscribe((v: any) => {});\n  }\n/**\n * @return {?}\n */\npreload(): Observable<any> { return this.processRoutes(this.injector, this.router.config); }\n/**\n * @return {?}\n */\nngOnDestroy() { this.subscription.unsubscribe(); }\n/**\n * @param {?} injector\n * @param {?} routes\n * @return {?}\n */\nprivate processRoutes(injector: Injector, routes: Routes): Observable<void> {\n    const /** @type {?} */ res: Observable<any>[] = [];\n    for (const /** @type {?} */ c of routes) {\n      // we already have the config loaded, just recurse\n      if (c.loadChildren && !c.canLoad && ( /** @type {?} */((<any>c)))._loadedConfig) {\n        const /** @type {?} */ childConfig = ( /** @type {?} */((<any>c)))._loadedConfig;\n        res.push(this.processRoutes(childConfig.injector, childConfig.routes));\n\n        // no config loaded, fetch the config\n      } else if (c.loadChildren && !c.canLoad) {\n        res.push(this.preloadConfig(injector, c));\n\n        // recurse into children\n      } else if (c.children) {\n        res.push(this.processRoutes(injector, c.children));\n      }\n    }\n    return mergeAll.call(from(res));\n  }\n/**\n * @param {?} injector\n * @param {?} route\n * @return {?}\n */\nprivate preloadConfig(injector: Injector, route: Route): Observable<void> {\n    return this.preloadingStrategy.preload(route, () => {\n      const /** @type {?} */ loaded = this.loader.load(injector, route.loadChildren);\n      return mergeMap.call(loaded, (config: any): any => {\n        const /** @type {?} */ c: any = route;\n        c._loadedConfig = config;\n        return this.processRoutes(config.injector, config.routes);\n      });\n    });\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Router, },\n{type: NgModuleFactoryLoader, },\n{type: Compiler, },\n{type: Injector, },\n{type: PreloadingStrategy, },\n];\n}\n\nfunction RouterPreloader_tsickle_Closure_declarations() {\n/** @type {?} */\nRouterPreloader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nRouterPreloader.ctorParameters;\n/** @type {?} */\nRouterPreloader.prototype.loader;\n/** @type {?} */\nRouterPreloader.prototype.subscription;\n/** @type {?} */\nRouterPreloader.prototype.router;\n/** @type {?} */\nRouterPreloader.prototype.injector;\n/** @type {?} */\nRouterPreloader.prototype.preloadingStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}