{"version":3,"file":"router_state.js","sourceRoot":"","sources":["../../../../modules/@angular/router/src/router_state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {Data, ResolveData, Route} from './config';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlSegment, UrlSegmentGroup, UrlTree, equalSegments} from './url_tree';\nimport {merge, shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n/**\n * \\@whatItDoes Represents the state of the router.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const root: ActivatedRoute = state.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterState is a tree of activated routes. Every node in this tree knows about the \"consumed\" URL\n * segments,\n * the extracted parameters, and the resolved data.\n * \n * See {\\@link ActivatedRoute} for more information.\n * \n * \\@stable\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n/**\n * \\@internal\n * @param {?} root\n * @param {?} snapshot\n */\nconstructor(\n      root: TreeNode<ActivatedRoute>,\npublic snapshot: RouterStateSnapshot) {\n    super(root);\n    setRouterStateSnapshot<RouterState, ActivatedRoute>(this, root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return this.snapshot.toString(); }\n}\n\nfunction RouterState_tsickle_Closure_declarations() {\n/**\n * The current snapshot of the router state\n * @type {?}\n */\nRouterState.prototype.snapshot;\n}\n\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type<any>): RouterState {\n  const /** @type {?} */ snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const /** @type {?} */ emptyUrl = new BehaviorSubject([new UrlSegment('', {})]);\n  const /** @type {?} */ emptyParams = new BehaviorSubject({});\n  const /** @type {?} */ emptyData = new BehaviorSubject({});\n  const /** @type {?} */ emptyQueryParams = new BehaviorSubject({});\n  const /** @type {?} */ fragment = new BehaviorSubject('');\n  const /** @type {?} */ activated = new ActivatedRoute(\n      emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent,\n      snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(new TreeNode<ActivatedRoute>(activated, []), snapshot);\n}\n/**\n * @param {?} urlTree\n * @param {?} rootComponent\n * @return {?}\n */\nexport function createEmptyStateSnapshot(\n    urlTree: UrlTree, rootComponent: Type<any>): RouterStateSnapshot {\n  const /** @type {?} */ emptyParams = {};\n  const /** @type {?} */ emptyData = {};\n  const /** @type {?} */ emptyQueryParams = {};\n  const /** @type {?} */ fragment = '';\n  const /** @type {?} */ activated = new ActivatedRouteSnapshot(\n      [], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null,\n      urlTree.root, -1, {});\n  return new RouterStateSnapshot('', new TreeNode<ActivatedRouteSnapshot>(activated, []));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet.\n * An `ActivatedRoute` can also be used to traverse the router state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({...}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *     const url: Observable<string> = route.url.map(segments => segments.join(''));\n *     // route.data includes both `data` and `resolve`\n *     const user = route.data.map(d => d.user);\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRoute {\n  /** The current snapshot of this route */\n  snapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  /** @internal */\n  _routerState: RouterState;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} futureSnapshot\n */\nconstructor(\npublic url: Observable<UrlSegment[]>,\npublic params: Observable<Params>,\npublic queryParams: Observable<Params>,\npublic fragment: Observable<string>,\npublic data: Observable<Data>,\npublic outlet: string,\npublic component: Type<any>|string, futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route { return this._futureSnapshot.routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRoute { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRoute { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRoute { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRoute[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRoute[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\ntoString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\nfunction ActivatedRoute_tsickle_Closure_declarations() {\n/**\n * The current snapshot of this route\n * @type {?}\n */\nActivatedRoute.prototype.snapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._futureSnapshot;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRoute.prototype._routerState;\n/**\n * An observable of the URL segments matched by this route\n * @type {?}\n */\nActivatedRoute.prototype.url;\n/**\n * An observable of the matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRoute.prototype.params;\n/**\n * An observable of the query parameters shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.queryParams;\n/**\n * An observable of the URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRoute.prototype.fragment;\n/**\n * An observable of the static and resolved data of this route.\n * @type {?}\n */\nActivatedRoute.prototype.data;\n/**\n * The outlet name of the route. It's a constant\n * @type {?}\n */\nActivatedRoute.prototype.outlet;\n/** @type {?} */\nActivatedRoute.prototype.component;\n}\n\n\n/** @internal */\nexport type Inherited = {\n  params: Params,\n  data: Data,\n  resolve: Data,\n};\n/**\n * \\@internal\n * @param {?} route\n * @return {?}\n */\nexport function inheritedParamsDataResolve(route: ActivatedRouteSnapshot): Inherited {\n  const /** @type {?} */ pathToRoot = route.pathFromRoot;\n\n  let /** @type {?} */ inhertingStartingFrom = pathToRoot.length - 1;\n\n  while (inhertingStartingFrom >= 1) {\n    const /** @type {?} */ current = pathToRoot[inhertingStartingFrom];\n    const /** @type {?} */ parent = pathToRoot[inhertingStartingFrom - 1];\n    // current route is an empty path => inherits its parent's params and data\n    if (current.routeConfig && current.routeConfig.path === '') {\n      inhertingStartingFrom--;\n\n      // parent is componentless => current route should inherit its params and data\n    } else if (!parent.component) {\n      inhertingStartingFrom--;\n\n    } else {\n      break;\n    }\n  }\n\n  return pathToRoot.slice(inhertingStartingFrom).reduce((res, curr) => {\n    const /** @type {?} */ params = merge(res.params, curr.params);\n    const /** @type {?} */ data = merge(res.data, curr.data);\n    const /** @type {?} */ resolve = merge(res.resolve, curr._resolvedData);\n    return {params, data, resolve};\n  }, /** @type {?} */(( <any>{params: {}, data: {}, resolve: {}})));\n}\n/**\n * \\@whatItDoes Contains the information about a route associated with a component loaded in an\n * outlet\n * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router\n * state tree.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'./my-component.html'}) \n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *     const url: string = route.snapshot.url.join('');\n *     const user = route.snapshot.data.user;\n *   }\n * }\n * ```\n * \n * \\@stable\n */\nexport class ActivatedRouteSnapshot {\n  /** @internal **/\n  _routeConfig: Route;\n  /** @internal **/\n  _urlSegment: UrlSegmentGroup;\n  /** @internal */\n  _lastPathIndex: number;\n  /** @internal */\n  _resolve: ResolveData;\n  /** @internal */\n  _resolvedData: Data;\n  /** @internal */\n  _routerState: RouterStateSnapshot;\n/**\n * \\@internal\n * @param {?} url\n * @param {?} params\n * @param {?} queryParams\n * @param {?} fragment\n * @param {?} data\n * @param {?} outlet\n * @param {?} component\n * @param {?} routeConfig\n * @param {?} urlSegment\n * @param {?} lastPathIndex\n * @param {?} resolve\n */\nconstructor(\npublic url: UrlSegment[],\npublic params: Params,\npublic queryParams: Params,\npublic fragment: string,\npublic data: Data,\npublic outlet: string,\npublic component: Type<any>|string, routeConfig: Route, urlSegment: UrlSegmentGroup,\n      lastPathIndex: number, resolve: ResolveData) {\n    this._routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n    this._resolve = resolve;\n  }\n/**\n * The configuration used to match this route\n * @return {?}\n */\nget routeConfig(): Route { return this._routeConfig; }\n/**\n * The root of the router state\n * @return {?}\n */\nget root(): ActivatedRouteSnapshot { return this._routerState.root; }\n/**\n * The parent of this route in the router state tree\n * @return {?}\n */\nget parent(): ActivatedRouteSnapshot { return this._routerState.parent(this); }\n/**\n * The first child of this route in the router state tree\n * @return {?}\n */\nget firstChild(): ActivatedRouteSnapshot { return this._routerState.firstChild(this); }\n/**\n * The children of this route in the router state tree\n * @return {?}\n */\nget children(): ActivatedRouteSnapshot[] { return this._routerState.children(this); }\n/**\n * The path from the root of the router state tree to this route\n * @return {?}\n */\nget pathFromRoot(): ActivatedRouteSnapshot[] { return this._routerState.pathFromRoot(this); }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ url = this.url.map(segment => segment.toString()).join('/');\n    const /** @type {?} */ matched = this._routeConfig ? this._routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\nfunction ActivatedRouteSnapshot_tsickle_Closure_declarations() {\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routeConfig;\n/**\n * \\@internal *\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._urlSegment;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._lastPathIndex;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolve;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._resolvedData;\n/**\n * \\@internal\n * @type {?}\n */\nActivatedRouteSnapshot.prototype._routerState;\n/**\n * The URL segments matched by this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.url;\n/**\n * The matrix parameters scoped to this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.params;\n/**\n * The query parameters shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.queryParams;\n/**\n * The URL fragment shared by all the routes\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.fragment;\n/**\n * The static and resolved data of this route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.data;\n/**\n * The outlet name of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.outlet;\n/**\n * The component of the route\n * @type {?}\n */\nActivatedRouteSnapshot.prototype.component;\n}\n\n/**\n * \\@whatItDoes Represents the state of the router at a moment in time.\n * \n * \\@howToUse \n * \n * ```\n * \\@Component({templateUrl:'template.html'}) \n * class MyComponent {\n *   constructor(router: Router) {\n *     const state: RouterState = router.routerState;\n *     const snapshot: RouterStateSnapshot = state.snapshot;\n *     const root: ActivatedRouteSnapshot = snapshot.root;\n *     const child = root.firstChild;\n *     const id: Observable<string> = child.params.map(p => p.id);\n *     //...\n *   }\n * }\n * ```\n * \n * \\@description \n * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about\n * the \"consumed\" URL segments, the extracted parameters, and the resolved data.\n * \n * \\@stable\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n/**\n * \\@internal\n * @param {?} url\n * @param {?} root\n */\nconstructor(\npublic url: string, root: TreeNode<ActivatedRouteSnapshot>) {\n    super(root);\n    setRouterStateSnapshot<RouterStateSnapshot, ActivatedRouteSnapshot>(this, root);\n  }\n/**\n * @return {?}\n */\ntoString(): string { return serializeNode(this._root); }\n}\n\nfunction RouterStateSnapshot_tsickle_Closure_declarations() {\n/**\n * The url from which this snapshot was created\n * @type {?}\n */\nRouterStateSnapshot.prototype.url;\n}\n\n/**\n * @param {?} state\n * @param {?} node\n * @return {?}\n */\nfunction setRouterStateSnapshot<U, T extends{_routerState: U}>(state: U, node: TreeNode<T>): void {\n  node.value._routerState = state;\n  node.children.forEach(c => setRouterStateSnapshot(state, c));\n}\n/**\n * @param {?} node\n * @return {?}\n */\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const /** @type {?} */ c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\n  return `${node.value}${c}`;\n}\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n * @param {?} route\n * @return {?}\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    const /** @type {?} */ currentSnapshot = route.snapshot;\n    route.snapshot = route._futureSnapshot;\n    if (!shallowEqual(currentSnapshot.queryParams, route._futureSnapshot.queryParams)) {\n      ( /** @type {?} */((<any>route.queryParams))).next(route._futureSnapshot.queryParams);\n    }\n    if (currentSnapshot.fragment !== route._futureSnapshot.fragment) {\n      ( /** @type {?} */((<any>route.fragment))).next(route._futureSnapshot.fragment);\n    }\n    if (!shallowEqual(currentSnapshot.params, route._futureSnapshot.params)) {\n      ( /** @type {?} */((<any>route.params))).next(route._futureSnapshot.params);\n    }\n    if (!shallowEqualArrays(currentSnapshot.url, route._futureSnapshot.url)) {\n      ( /** @type {?} */((<any>route.url))).next(route._futureSnapshot.url);\n    }\n    if (!equalParamsAndUrlSegments(currentSnapshot, route._futureSnapshot)) {\n      ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n    }\n  } else {\n    route.snapshot = route._futureSnapshot;\n\n    // this is for resolved data\n    ( /** @type {?} */((<any>route.data))).next(route._futureSnapshot.data);\n  }\n}\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\nexport function equalParamsAndUrlSegments(\n    a: ActivatedRouteSnapshot, b: ActivatedRouteSnapshot): boolean {\n  return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}