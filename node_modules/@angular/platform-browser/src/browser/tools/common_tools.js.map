{"version":3,"file":"common_tools.js","sourceRoot":"","sources":["../../../../../../modules/@angular/platform-browser/src/browser/tools/common_tools.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ComponentRef} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {window} from '../../facade/browser';\nimport {NumberWrapper, isPresent} from '../../facade/lang';\nexport class ChangeDetectionPerfRecord {\n/**\n * @param {?} msPerTick\n * @param {?} numTicks\n */\nconstructor(public msPerTick: number,\npublic numTicks: number) {}\n}\n\nfunction ChangeDetectionPerfRecord_tsickle_Closure_declarations() {\n/** @type {?} */\nChangeDetectionPerfRecord.prototype.msPerTick;\n/** @type {?} */\nChangeDetectionPerfRecord.prototype.numTicks;\n}\n\n/**\n * Entry point for all Angular debug tools. This object corresponds to the `ng`\n * global variable accessible in the dev console.\n */\nexport class AngularTools {\n  profiler: AngularProfiler;\n/**\n * @param {?} ref\n */\nconstructor(ref: ComponentRef<any>) { this.profiler = new AngularProfiler(ref); }\n}\n\nfunction AngularTools_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularTools.prototype.profiler;\n}\n\n/**\n * Entry point for all Angular profiling-related debug tools. This object\n * corresponds to the `ng.profiler` in the dev console.\n */\nexport class AngularProfiler {\n  appRef: ApplicationRef;\n/**\n * @param {?} ref\n */\nconstructor(ref: ComponentRef<any>) { this.appRef = ref.injector.get(ApplicationRef); }\n/**\n * Exercises change detection in a loop and then prints the average amount of\n * time in milliseconds how long a single round of change detection takes for\n * the current state of the UI. It runs a minimum of 5 rounds for a minimum\n * of 500 milliseconds.\n * \n * Optionally, a user may pass a `config` parameter containing a map of\n * options. Supported options are:\n * \n * `record` (boolean) - causes the profiler to record a CPU profile while\n * it exercises the change detector. Example:\n * \n * ```\n * ng.profiler.timeChangeDetection({record: true})\n * ```\n * @param {?} config\n * @return {?}\n */\ntimeChangeDetection(config: any): ChangeDetectionPerfRecord {\n    const /** @type {?} */ record = config && config['record'];\n    const /** @type {?} */ profileName = 'Change Detection';\n    // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened\n    const /** @type {?} */ isProfilerAvailable = isPresent(window.console.profile);\n    if (record && isProfilerAvailable) {\n      window.console.profile(profileName);\n    }\n    const /** @type {?} */ start = getDOM().performanceNow();\n    let /** @type {?} */ numTicks = 0;\n    while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {\n      this.appRef.tick();\n      numTicks++;\n    }\n    const /** @type {?} */ end = getDOM().performanceNow();\n    if (record && isProfilerAvailable) {\n      // need to cast to <any> because type checker thinks there's no argument\n      // while in fact there is:\n      //\n      // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd\n      ( /** @type {?} */((<any>window.console.profileEnd)))(profileName);\n    }\n    const /** @type {?} */ msPerTick = (end - start) / numTicks;\n    window.console.log(`ran ${numTicks} change detection cycles`);\n    window.console.log(`${msPerTick.toFixed(2)} ms per check`);\n\n    return new ChangeDetectionPerfRecord(msPerTick, numTicks);\n  }\n}\n\nfunction AngularProfiler_tsickle_Closure_declarations() {\n/** @type {?} */\nAngularProfiler.prototype.appRef;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}