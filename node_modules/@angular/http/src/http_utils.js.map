{"version":3,"file":"http_utils.js","sourceRoot":"","sources":["../../../../modules/@angular/http/src/http_utils.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,aAAa,EAAC,MAAM,SAAS;AACrC;;;GAGG;AACH,oCAAoC,MAA8B;IAChE,EAAE,CAAC,CAAC,OAAO,MAAM,KAAK,QAAQ,CAAC;QAAC,MAAM,CAAC,MAAM,CAAC;IAE9C,MAAM,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC7B,KAAK,KAAK;YACR,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC;QAC3B,KAAK,MAAM;YACT,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;QAC5B,KAAK,KAAK;YACR,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC;QAC3B,KAAK,QAAQ;YACX,MAAM,CAAC,aAAa,CAAC,MAAM,CAAC;QAC9B,KAAK,SAAS;YACZ,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC;QAC/B,KAAK,MAAM;YACT,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC;QAC5B,KAAK,OAAO;YACV,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC;IAC/B,CAAC;IACD,MAAM,IAAI,KAAK,CAAC,0CAAuC,MAAM,yBAAqB,CAAC,CAAC;AACtF,CAAC;AAED,OAAO,IAAM,gBAAgB,CAAC,SAAS,GAAG,UAAC,MAAc,IAAc,OAAA,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,GAAG,GAAG,CAAC,EAA/B,CAA+B,CAAC;AACvG;;;GAGG;AACH,+BAA+B,GAAQ;IACrC,EAAE,CAAC,CAAC,aAAa,IAAI,GAAG,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC;IACzB,CAAC;IACD,EAAE,CAAC,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,eAAe,CAAC,CAAC;IAChD,CAAC;IACD,MAAM,CAAC;AACT,CAAC;AACD;;;GAGG;AACH,oCAAoC,KAAa;IAC/C,IAAM,gBAAgB,CAAC,IAAI,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC5D,GAAG,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,gBAAgB,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACzF,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;IACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;AACrB,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}