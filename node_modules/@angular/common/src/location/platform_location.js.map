{"version":3,"file":"platform_location.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/location/platform_location.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAEI,EAAC,WAAW,EAAC,MAAM,eAAe;AACzC;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BG;AACH;IAAA;IAwDA,CAAC;IAvDD;;;OAGG;IACH,6CAAkB,GAAlB,cAAsB,CAAC;IACvB;;;;OAIG;IACH,qCAAU,GAAV,UAAW,EAA0B,IAAG,CAAC;IACzC;;;;OAIG;IACH,uCAAY,GAAZ,UAAa,EAA0B,IAAG,CAAC;IAI3C,sBAAI,sCAAQ;QAHZ;;WAEG;aACH,cAAyB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAIvC,sBAAI,oCAAM;QAHV;;WAEG;aACH,cAAuB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IAIrC,sBAAI,kCAAI;QAHR;;WAEG;aACH,cAAqB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;;OAAA;IACnC;;;;;;OAMG;IACH,uCAAY,GAAZ,UAAa,KAAU,EAAE,KAAa,EAAE,GAAW,IAAG,CAAC;IACvD;;;;;;OAMG;IACH,oCAAS,GAAT,UAAU,KAAU,EAAE,KAAa,EAAE,GAAW,IAAG,CAAC;IACpD;;;OAGG;IACH,kCAAO,GAAP,cAAW,CAAC;IACZ;;;OAGG;IACH,+BAAI,GAAJ,cAAQ,CAAC;IACT,uBAAC;AAAD,CAAC,AAxDD,IAwDC;AAED;;;GAGG;AACH,OAAO,IAAM,gBAAgB,CAAC,oBAAoB,GAAG,IAAI,WAAW,CAAC,sBAAsB,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OpaqueToken} from '@angular/core';\n/**\n * This class should not be used directly by an application developer. Instead, use\n * {\\@link Location}.\n * \n * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform\n * agnostic.\n * This means that we can have different implementation of `PlatformLocation` for the different\n * platforms\n * that angular supports. For example, the default `PlatformLocation` is {\\@link\n * BrowserPlatformLocation},\n * however when you run your app in a WebWorker you use {\\@link WebWorkerPlatformLocation}.\n * \n * The `PlatformLocation` class is used directly by all implementations of {\\@link LocationStrategy}\n * when\n * they need to interact with the DOM apis like pushState, popState, etc...\n * \n * {\\@link LocationStrategy} in turn is used by the {\\@link Location} service which is used directly\n * by\n * the {\\@link Router} in order to navigate between routes. Since all interactions between {\\@link\n * Router} /\n * {\\@link Location} / {\\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`\n * class\n * they are all platform independent.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformLocation {\n/**\n * @abstract\n * @return {?}\n */\ngetBaseHrefFromDOM() {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonPopState(fn: LocationChangeListener) {}\n/**\n * @abstract\n * @param {?} fn\n * @return {?}\n */\nonHashChange(fn: LocationChangeListener) {}\n/**\n * @return {?}\n */\nget pathname(): string { return null; }\n/**\n * @return {?}\n */\nget search(): string { return null; }\n/**\n * @return {?}\n */\nget hash(): string { return null; }\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\nreplaceState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @param {?} state\n * @param {?} title\n * @param {?} url\n * @return {?}\n */\npushState(state: any, title: string, url: string) {}\n/**\n * @abstract\n * @return {?}\n */\nforward() {}\n/**\n * @abstract\n * @return {?}\n */\nback() {}\n}\n\n/**\n * @whatItDoes indicates when a location is initialized\n * @experimental\n */\nexport const /** @type {?} */ LOCATION_INITIALIZED = new OpaqueToken('Location Initialized');\n\n/**\n * A serializable version of the event from onPopState or onHashChange\n *\n * @experimental\n */\nexport interface LocationChangeEvent { type: string; }\n\n/**\n * @experimental\n */\nexport interface LocationChangeListener { (e: LocationChangeEvent): any; }\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}