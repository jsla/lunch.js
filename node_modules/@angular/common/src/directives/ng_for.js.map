{"version":3,"file":"ng_for.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/directives/ng_for.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, CollectionChangeRecord, DefaultIterableDiffer, Directive, DoCheck, EmbeddedViewRef, Input, IterableDiffer, IterableDiffers, OnChanges, SimpleChanges, TemplateRef, TrackByFn, ViewContainerRef, isDevMode} from '@angular/core';\n\nimport {getTypeNameForDebugging} from '../facade/lang';\nexport class NgForRow {\n/**\n * @param {?} $implicit\n * @param {?} index\n * @param {?} count\n */\nconstructor(public $implicit: any,\npublic index: number,\npublic count: number) {}\n/**\n * @return {?}\n */\nget first(): boolean { return this.index === 0; }\n/**\n * @return {?}\n */\nget last(): boolean { return this.index === this.count - 1; }\n/**\n * @return {?}\n */\nget even(): boolean { return this.index % 2 === 0; }\n/**\n * @return {?}\n */\nget odd(): boolean { return !this.even; }\n}\n\nfunction NgForRow_tsickle_Closure_declarations() {\n/** @type {?} */\nNgForRow.prototype.$implicit;\n/** @type {?} */\nNgForRow.prototype.index;\n/** @type {?} */\nNgForRow.prototype.count;\n}\n\n/**\n * The `NgFor` directive instantiates a template once per item from an iterable. The context for\n * each instantiated template inherits from the outer context with the given loop variable set\n * to the current item from the iterable.\n * \n * ### Local Variables\n * \n * `NgFor` provides several exported values that can be aliased to local variables:\n * \n * * `index` will be set to the current loop iteration for each template context.\n * * `first` will be set to a boolean value indicating whether the item is the first one in the\n *   iteration.\n * * `last` will be set to a boolean value indicating whether the item is the last one in the\n *   iteration.\n * * `even` will be set to a boolean value indicating whether this item has an even index.\n * * `odd` will be set to a boolean value indicating whether this item has an odd index.\n * \n * ### Change Propagation\n * \n * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:\n * \n * * When an item is added, a new instance of the template is added to the DOM.\n * * When an item is removed, its template instance is removed from the DOM.\n * * When items are reordered, their respective templates are reordered in the DOM.\n * * Otherwise, the DOM element for that item will remain the same.\n * \n * Angular uses object identity to track insertions and deletions within the iterator and reproduce\n * those changes in the DOM. This has important implications for animations and any stateful\n * controls\n * (such as `<input>` elements which accept user input) that are present. Inserted rows can be\n * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such\n * as user input.\n * \n * It is possible for the identities of elements in the iterator to change while the data does not.\n * This can happen, for example, if the iterator produced from an RPC to the server, and that\n * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with\n * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old\n * elements were deleted and all new elements inserted). This is an expensive operation and should\n * be avoided if possible.\n * \n * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.\n * `trackBy` takes a function which has two arguments: `index` and `item`.\n * If `trackBy` is given, Angular tracks changes by the return value of the function.\n * \n * ### Syntax\n * \n * - `<li *ngFor=\"let item of items; let i = index; trackBy: trackByFn\">...</li>`\n * - `<li template=\"ngFor let item of items; let i = index; trackBy: trackByFn\">...</li>`\n * \n * With `<template>` element:\n * \n * ```\n * <template ngFor let-item [ngForOf]=\"items\" let-i=\"index\" [ngForTrackBy]=\"trackByFn\">\n *   <li>...</li>\n * </template>\n * ```\n * \n * ### Example\n * \n * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed\n * example.\n * \n * \\@stable\n */\nexport class NgFor implements DoCheck, OnChanges {\n   ngForOf: any;\n/**\n * @param {?} fn\n * @return {?}\n */\nset ngForTrackBy(fn: TrackByFn) {\n    if (isDevMode() && fn != null && typeof fn !== 'function') {\n      // TODO(vicb): use a log service once there is a public one available\n      if ( /** @type {?} */((<any>console)) && /** @type {?} */(( <any>console.warn))) {\n        console.warn(\n            `trackBy must be a function, but received ${JSON.stringify(fn)}. ` +\n            `See https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html#!#change-propagation for more information.`);\n      }\n    }\n    this._trackByFn = fn;\n  }\n/**\n * @return {?}\n */\nget ngForTrackBy(): TrackByFn { return this._trackByFn; }\nprivate _differ: IterableDiffer = null;\nprivate _trackByFn: TrackByFn;\n/**\n * @param {?} _viewContainer\n * @param {?} _template\n * @param {?} _differs\n * @param {?} _cdr\n */\nconstructor(\nprivate _viewContainer: ViewContainerRef,\nprivate _template: TemplateRef<NgForRow>,\nprivate _differs: IterableDiffers,\nprivate _cdr: ChangeDetectorRef) {}\n/**\n * @param {?} value\n * @return {?}\n */\nset ngForTemplate(value: TemplateRef<NgForRow>) {\n    if (value) {\n      this._template = value;\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges): void {\n    if ('ngForOf' in changes) {\n      // React on ngForOf changes only once all inputs have been initialized\n      const /** @type {?} */ value = changes['ngForOf'].currentValue;\n      if (!this._differ && value) {\n        try {\n          this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);\n        } catch ( /** @type {?} */e) {\n          throw new Error(\n              `Cannot find a differ supporting object '${value}' of type '${getTypeNameForDebugging(value)}'. NgFor only supports binding to Iterables such as Arrays.`);\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck(): void {\n    if (this._differ) {\n      const /** @type {?} */ changes = this._differ.diff(this.ngForOf);\n      if (changes) this._applyChanges(changes);\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nprivate _applyChanges(changes: DefaultIterableDiffer) {\n    const /** @type {?} */ insertTuples: RecordViewTuple[] = [];\n    changes.forEachOperation(\n        (item: CollectionChangeRecord, adjustedPreviousIndex: number, currentIndex: number) => {\n          if (item.previousIndex == null) {\n            const /** @type {?} */ view = this._viewContainer.createEmbeddedView(\n                this._template, new NgForRow(null, null, null), currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, view);\n            insertTuples.push(tuple);\n          } else if (currentIndex == null) {\n            this._viewContainer.remove(adjustedPreviousIndex);\n          } else {\n            const /** @type {?} */ view = this._viewContainer.get(adjustedPreviousIndex);\n            this._viewContainer.move(view, currentIndex);\n            const /** @type {?} */ tuple = new RecordViewTuple(item, /** @type {?} */(( <EmbeddedViewRef<NgForRow>>view)));\n            insertTuples.push(tuple);\n          }\n        });\n\n    for (let /** @type {?} */ i = 0; i < insertTuples.length; i++) {\n      this._perViewChange(insertTuples[i].view, insertTuples[i].record);\n    }\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ilen = this._viewContainer.length; i < ilen; i++) {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForRow>>this._viewContainer.get(i)));\n      viewRef.context.index = i;\n      viewRef.context.count = ilen;\n    }\n\n    changes.forEachIdentityChange((record: any) => {\n      const /** @type {?} */ viewRef = /** @type {?} */(( <EmbeddedViewRef<NgForRow>>this._viewContainer.get(record.currentIndex)));\n      viewRef.context.$implicit = record.item;\n    });\n  }\n/**\n * @param {?} view\n * @param {?} record\n * @return {?}\n */\nprivate _perViewChange(view: EmbeddedViewRef<NgForRow>, record: CollectionChangeRecord) {\n    view.context.$implicit = record.item;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{selector: '[ngFor][ngForOf]'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: TemplateRef, },\n{type: IterableDiffers, },\n{type: ChangeDetectorRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'ngForOf': [{ type: Input },],\n'ngForTrackBy': [{ type: Input },],\n'ngForTemplate': [{ type: Input },],\n};\n}\n\nfunction NgFor_tsickle_Closure_declarations() {\n/** @type {?} */\nNgFor.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgFor.ctorParameters;\n/** @type {?} */\nNgFor.propDecorators;\n/** @type {?} */\nNgFor.prototype.ngForOf;\n/** @type {?} */\nNgFor.prototype._differ;\n/** @type {?} */\nNgFor.prototype._trackByFn;\n/** @type {?} */\nNgFor.prototype._viewContainer;\n/** @type {?} */\nNgFor.prototype._template;\n/** @type {?} */\nNgFor.prototype._differs;\n/** @type {?} */\nNgFor.prototype._cdr;\n}\n\nclass RecordViewTuple {\n/**\n * @param {?} record\n * @param {?} view\n */\nconstructor(public record: any,\npublic view: EmbeddedViewRef<NgForRow>) {}\n}\n\nfunction RecordViewTuple_tsickle_Closure_declarations() {\n/** @type {?} */\nRecordViewTuple.prototype.record;\n/** @type {?} */\nRecordViewTuple.prototype.view;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}