{"version":3,"file":"number_pipe.js","sourceRoot":"","sources":["../../../../../modules/@angular/common/src/pipes/number_pipe.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, LOCALE_ID, Pipe, PipeTransform, Type} from '@angular/core';\n\nimport {NumberWrapper} from '../facade/lang';\n\nimport {NumberFormatStyle, NumberFormatter} from './intl';\nimport {InvalidPipeArgumentError} from './invalid_pipe_argument_error';\n\nconst /** @type {?} */ _NUMBER_FORMAT_REGEXP = /^(\\d+)?\\.((\\d+)(-(\\d+))?)?$/;\n/**\n * @param {?} pipe\n * @param {?} locale\n * @param {?} value\n * @param {?} style\n * @param {?} digits\n * @param {?=} currency\n * @param {?=} currencyAsSymbol\n * @return {?}\n */\nfunction formatNumber(\n    pipe: Type<any>, locale: string, value: number | string, style: NumberFormatStyle,\n    digits: string, currency: string = null, currencyAsSymbol: boolean = false): string {\n  if (value == null) return null;\n\n  // Convert strings to numbers\n  value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;\n  if (typeof value !== 'number') {\n    throw new InvalidPipeArgumentError(pipe, value);\n  }\n\n  let /** @type {?} */ minInt: number;\n  let /** @type {?} */ minFraction: number;\n  let /** @type {?} */ maxFraction: number;\n  if (style !== NumberFormatStyle.Currency) {\n    // rely on Intl default for currency\n    minInt = 1;\n    minFraction = 0;\n    maxFraction = 3;\n  }\n\n  if (digits) {\n    const /** @type {?} */ parts = digits.match(_NUMBER_FORMAT_REGEXP);\n    if (parts === null) {\n      throw new Error(`${digits} is not a valid digit info for number pipes`);\n    }\n    if (parts[1] != null) {  // min integer digits\n      minInt = NumberWrapper.parseIntAutoRadix(parts[1]);\n    }\n    if (parts[3] != null) {  // min fraction digits\n      minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);\n    }\n    if (parts[5] != null) {  // max fraction digits\n      maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);\n    }\n  }\n\n  return NumberFormatter.format( /** @type {?} */((value as number)), locale, style, {\n    minimumIntegerDigits: minInt,\n    minimumFractionDigits: minFraction,\n    maximumFractionDigits: maxFraction,\n    currency: currency,\n    currencyAsSymbol: currencyAsSymbol,\n  });\n}\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number according to locale rules.\n * \\@howToUse `number_expression | number[:digitInfo]`\n * \n * Formats a number as text. Group sizing and separator and other locale-specific\n * configurations are based on the active locale.\n * \n * where `expression` is a number:\n *  - `digitInfo` is a `string` which has a following format: <br>\n *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>\n *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.\n *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.\n *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.\n * \n * For more information on the acceptable range for each of these numbers and other\n * details see your native internationalization library.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='NumberPipe'}\n * \n * \\@stable\n */\nexport class DecimalPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits: string = null): string {\n    return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'number'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction DecimalPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nDecimalPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nDecimalPipe.ctorParameters;\n/** @type {?} */\nDecimalPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as a percentage according to locale rules.\n * \\@howToUse `number_expression | percent[:digitInfo]`\n * \n * \\@description \n * \n * Formats a number as percentage.\n * \n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='PercentPipe'}\n * \n * \\@stable\n */\nexport class PercentPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} digits\n * @return {?}\n */\ntransform(value: any, digits: string = null): string {\n    return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'percent'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction PercentPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nPercentPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPercentPipe.ctorParameters;\n/** @type {?} */\nPercentPipe.prototype._locale;\n}\n\n/**\n * \\@ngModule CommonModule\n * \\@whatItDoes Formats a number as currency using locale rules.\n * \\@howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`\n * \\@description \n * \n * Use `currency` to format a number as currency.\n * \n * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such\n *    as `USD` for the US dollar and `EUR` for the euro.\n * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.\n *   - `true`: use symbol (e.g. `$`).\n *   - `false`(default): use code (e.g. `USD`).\n * - `digitInfo` See {\\@link DecimalPipe} for detailed description.\n * \n * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers\n * and may require a polyfill. See {\\@linkDocs guide/browser-support} for details.\n * \n * ### Example\n * \n * {\\@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}\n * \n * \\@stable\n */\nexport class CurrencyPipe implements PipeTransform {\n/**\n * @param {?} _locale\n */\nconstructor(\nprivate _locale: string) {}\n/**\n * @param {?} value\n * @param {?=} currencyCode\n * @param {?=} symbolDisplay\n * @param {?=} digits\n * @return {?}\n */\ntransform(\n      value: any, currencyCode: string = 'USD', symbolDisplay: boolean = false,\n      digits: string = null): string {\n    return formatNumber(\n        CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode,\n        symbolDisplay);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'currency'}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [LOCALE_ID, ] }, ]},\n];\n}\n\nfunction CurrencyPipe_tsickle_Closure_declarations() {\n/** @type {?} */\nCurrencyPipe.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nCurrencyPipe.ctorParameters;\n/** @type {?} */\nCurrencyPipe.prototype._locale;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}